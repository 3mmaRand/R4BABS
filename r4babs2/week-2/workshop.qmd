---
title: "Workshop"
subtitle: "Introduction to statistical models: Single linear regression"
toc: true
toc-location: right
---

```{r}
#| include: false
library(tidyverse)
library(kableExtra)
```

# Introduction

![Artwork by @allison_horst: "linear regression
dragons"](images/linear-regression-dragon.png){fig-alt="Two blue dragons stand on scales next to a vertical yardstick showing one slightly taller than the other. Regression estimates are shown at the top as an equation: 'weight (tons) = 2.4 + 0.3*height', with explanatory text reading 'If all other variables are constant, we expect a 1 foot taller dragon to weight 0.3 tons more, on average.'"
width="800"}

## Session overview

In this session you will carry out, interpret and report a single linear
regression.

## Philosophy

Workshops are not a test. It is expected that you often don't know how
to start, make a lot of mistakes and need help. It is expected that you
are familiar with independent study content before the workshop.
However, you need not remember or understand every detail as the
workshop should build and consolidate your understanding. Tips

-   don't worry about making mistakes
-   don't let what you can not do interfere with what you can do
-   discussing code with your neighbours will help
-   look things up in the independent study material
-   look things up in your own code from earlier
-   there are no stupid questions

::: callout-note
## Key

These four symbols are used at the beginning of each instruction so you
know where to carry out the instruction.

![](images/do_on_your_computer.png) Something you need to do on your
computer. It may be opening programs or documents or locating a file.

![](images/do_in_R.png) Something you should do in RStudio. It will
often be typing a command or using the menus but might also be creating
folders, locating or moving files.

![](images/do_on_internet.png) Something you should do in your browser
on the internet. It may be searching for information, going to the VLE
or downloading a file.

![](images/answer.png) A question for you to think about and answer.
Record your answers in your script for future reference.
:::

# Getting started

![](images/do_on_your_computer.png) Start RStudio from the Start menu.

![](images/do_in_R.png) Make an RStudio project for this workshop by
clicking on the drop-down menu on top right where it says
`Project: (None)` and choosing New Project, then New Directory, then New
Project. Navigate to the `data-analysis-in-r-2`[^1] folder and name the
RStudio Project `week-2`.

[^1]: You made this folder in [Week
    1.](../week-1/workshop.html#getting-started)

![](images/do_in_R.png) Make new folders called `data-raw` and
`figures`. You can do this on the Files Pane by clicking New Folder and
typing into the box that appears.

![](images/do_in_R.png) Make a new script then save it with a name like
`single-linear-regression.R` to carry out the rest of the work.

![](images/do_in_R.png) Add a comment to the script:
`# Introduction to statistical models: Single linear-regression` and
load the **`tidyverse`** [@tidyverse] package

# Exercises

## Linear Regression

The data in [plant.xlsx](data-raw/plant.xlsx) is a set of observations
of plant growth over two months. The researchers planted the seeds and
harvested, dried and weighed a plant each day from day 10 so all the
data points are independent of each other.

![](images/do_in_R.png) Save a copy of [plant.xlsx](data-raw/plant.xlsx)
to your `data-raw` folder and import it.

```{r}
#| include: false

#---CODING ANSWER---
#
# we need the readxl package that was introduced in the last workshop
library(readxl)

# assign file name to variable because I'll use it more than once
file <- "data-raw/plant.xlsx"

# list the sheets in the file
excel_sheets(file)

# You might want to open th file in excel to make sure you know what is in it. 

# I'm a bit lazy - and less worried by being wrong - so will just guess the are data in the one named sheet. If I guess wrong, then I might open the file!
plant <- read_excel(file, sheet = "plant")

```

![](images/answer.png) What type of variables do you have? Which is the
response and which is the explanatory? What is the null hypothesis?

<!-- #---THINKING ANSWER---  -->

<!-- Day is discrete (but ordered) and is the explanatory; mass looks continuous and  -->

<!-- is the response.  -->

<!-- The null hypothesis can be expressed as one of the following: day does not  -->

<!-- explain the variation in mass; there is no linear relationship between  -->

<!-- day and mass; slope of the best fitting straight line is zero -->

### Exploring

![](images/do_in_R.png) Do a quick plot of the data:

```{r}
ggplot(plant, aes(x = day, y = mass)) +
  geom_point()
```

![](images/answer.png) What are the assumptions of linear regression? Do
these seem to be met?

<!-- #---THINKING ANSWER--- -->

<!-- linear relationship - looks ok on the scatter -->

<!-- each y is drawn from a normal distribution for each x and these  -->

<!-- normal distributions have the same variance - looks ok too.  -->

<!-- We'd expect y to be continuous and the scatter around a best fitting line  -->

<!-- we imagine is about even. -->

<!-- The values of y are independent of each other - yes it was a different  -->

<!-- plant each day (in fact plant was destroyed). Measuring the height  -->

<!-- of the SAME plants each day would violate this assumption -->

<!-- x has been chosen by the experimenter - yes. -->

### Applying, interpreting and reporting

![](images/do_in_R.png) We now carry out a regression assigning the
result of the `lm()` procedure to a variable and examining it with
`summary()`.

```{r}
mod <- lm(data = plant, mass ~ day)
summary(mod)
```

The Estimates in the Coefficients table give the intercept (first line)
and the slope (second line) of the best fitting straight line. The
*p*-values on the same line are tests of whether that coefficient is
different from zero.

The *F* value and *p*-value in the last line are a test of whether the
model as a whole explains a significant amount of variation in the
dependent variable. For a single linear regression this is exactly
equivalent to the test of the slope against zero.

![](images/answer.png) What is the equation of the line? What do you
conclude from the analysis?

<!-- #---THINKING ANSWER--- -->

<!-- mass = 1.606*day - 8.683 -->

<!-- the slope of the line is significantly different from zero OR -->

<!-- the day explains a significant amount of the variation in mass OR -->

<!-- mass can be predicted from the day (ANOVA: F = 88.4; d.f. = 1,49; p < 0.0001).  -->

![](images/answer.png) Does the line go through (0,0)?

<!-- #---THINKING ANSWER--- -->

<!-- yes it could. The intercept is -8.683 but it is not significantly  -->

<!-- different from zero thus it could be zero.  -->

![](images/answer.png) What percentage of variation is explained by the
line?

<!-- #---THINKING ANSWER--- -->

<!-- 64%  -->

It might be useful to assign the slope and the intercept to variables in
case we need them later. The can be accessed in the `mod$coefficients`
variable:

```{r}
mod$coefficients
```

![](images/do_in_R.png) Assign `mod$coefficients[1]` to `b0` and
`mod$coefficients[1]` to `b1`:

```{r}
b0 <- mod$coefficients[1] |> round(2)
b1 <- mod$coefficients[2] |> round(2)
```

I also rounded the values to two decimal places.

### Checking assumptions

We need to examine the residuals. Very conveniently, the object which is
created by `lm()` contains a variable called `$residuals`. Also
conveniently, the R's `plot()` function can used on the output objects
of `lm()`. The assumptions of the GLM demand that each *y* is drawn from
a normal distribution for each *x* and these normal distributions have
the same variance. Therefore, we plot the residuals against the fitted
values to see if the variance is the same for all the values of *x*. The
fitted - or predicted - values are the values on the line of best fit.
Each residual is the difference between the fitted values and the
observed value.

![](images/do_in_R.png) Plot the model residuals against the fitted
values like this:

```{r}
plot(mod, which = 1)
```

![](images/answer.png) What to you conclude?

<!-- #---THINKING ANSWER--- -->

<!-- The residuals look 'homogeneously' distributed. That is, the variance is the same  -->

<!-- for all the values of x.  -->

To examine normality of the model residuals we can plot them as a
histogram and do a normality test on them.

![](images/do_in_R.png) Plot a histogram of the residuals:

```{r}

ggplot(mapping = aes(x = mod$residuals)) + 
  geom_histogram(bins = 10)
```

![](images/do_in_R.png) Use the `shapiro.test()` to test the normality
of the model residuals

```{r}
shapiro.test(mod$residuals)
```

Usually, when we are doing statistical tests we would like the the test
to be significant because it means we have evidence of a biological
effect. However, when doing normality tests we hope it will not be
significant. A non-significant result means that there is no significant
difference between the distribution of the residuals and a normal
distribution and that indicates the assumptions are met.

![](images/answer.png) What to you conclude?

<!-- #---THINKING ANSWER--- -->

<!-- the residuals appear roughly normally distributed.  -->

<!-- The histogram is symmetrical and the shapiro test is NS. -->

<!-- Overall, it seems the assumptions are met -->

### Illustrating

We want a figure with the points and the statistical model, i.e., the
best fitting straight line.

![](images/do_in_R.png) Create a scatter plot using `geom_point()`

```{r}
ggplot(plant, aes(x = day, y = mass)) +
  geom_point() + 
  theme_classic()
```

![](images/do_in_R.png) The `geom_smooth()` function will add a variety
of fitted lines to a plot. We want a straight line so we need to specify
`method = "lm"`:

```{r}
ggplot(plant, aes(x = day, y = mass)) +
  geom_point() +   
  geom_smooth(method = "lm", 
              se = FALSE, 
              colour = "black") +
  theme_classic()
```

![](images/do_in_R.png) What do the `se` and `colour` arguments do? Try
changing them.

![](images/do_in_R.png) Let's add the equation of the line to the figure
using `annotate()`:

```{r}
ggplot(plant, aes(x = day, y = mass)) +
  geom_point() +
  geom_smooth(method = "lm", 
              se = FALSE, 
              colour = "black") +
  annotate("text", x = 20, y = 110, 
           label = "mass = 1.61 * day - 8.68") +
  theme_classic()

```

We have to tell `annotate()` what type of geom we want - `text` in this
case, - where to put it, and the text we want to appear.

```{r}
#| include: false

#---BONUS CODING ANSWER---
# I'm not expecting you to know about this but it's a neat trick. The glue package allows
# us to use R objects in strings so their values are printed.
ggplot(plant, aes(x = day, y = mass)) +
  geom_point() +
  geom_smooth(method = "lm", 
              se = FALSE, 
              colour = "black") +
  scale_x_continuous(name = "Day",
                     limits = c(0, 65),
                     expand = c(0,0)) +
  scale_y_continuous(name = "Mass (g)",
                     limits = c(0, 120),
                     expand = c(0,0)) +
  annotate("text", x = 20, y = 110, 
           label = glue::glue("mass = {b1} day {b0}")) +
  theme_classic()
```

![](images/do_in_R.png) Improve the axes. You may need to refer back
[Changing the
axes](../../r4babs1/week-7/workshop.html#changing-the-axes) from the
Week 7 workshop in BABS1 [@rand2023]

```{r}
#| include: false

#---CODING ANSWER---
#

ggplot(plant, aes(x = day, y = mass)) +
  geom_point() +
  geom_smooth(method = "lm", 
              se = FALSE, 
              colour = "black") +
  scale_x_continuous(name = "Day",
                     limits = c(0, 65),
                     expand = c(0,0)) +
  scale_y_continuous(name = "Mass (g)",
                     limits = c(0, 120),
                     expand = c(0,0)) +
  annotate("text", x = 20, y = 110, 
           label = "mass = 1.61 * day - 8.68") +
  theme_classic()


# note that we need to use the continuous versions of both scale_
```

![](images/do_in_R.png) Save your figure to your `figures` folder. Make
sure you [script figure saving with
`ggsave()`](../../r4babs1/week-9/workshop.html#writing-figures-to-file).

```{r}
#| include: false

#---CODING ANSWER---

# Assign the figure to a variable
fig2 <- ggplot(plant, aes(x = day, y = mass)) +
  geom_point() +
  geom_smooth(method = "lm", 
              se = FALSE, 
              colour = "black") +
  scale_x_continuous(name = "Day",
                     limits = c(0, 65),
                     expand = c(0,0)) +
  scale_y_continuous(name = "Mass (g)",
                     limits = c(0, 120),
                     expand = c(0,0)) +
  annotate("text", x = 20, y = 110, 
           label = "mass = 1.61 * day - 8.68") +
  theme_classic()

```

```{r}
#| include: false

#---CODING ANSWER---

# save figure to figures/plant-growth.png
ggsave("figures/plant-growth.png",
       plot = fig2,
       width = 3.5,
       height = 3.5,
       units = "in",
       dpi = 300)

```

## Look after future you!

Make life easier for future you by going back through your code and
tidying up.

You might need to:

-   collect together library statements at the beginning of the code
-   edit your comments for clarity and include a paragraph explaining
    what the analysis is about
-   rename variables for consistency or clarity
-   remove house keeping or exploratory code or mark it for later
    removal
-   restyle code, add code section headers etc

If you need to make additional notes that do not belong in the script,
you can add them a text file called README.txt that future you will know
what to do with!

You're finished!

# 🥳 Well Done! 🎉

![Artwork by @allison_horst: "length
typos"](images/lenght-length.png){fig-alt="Comic panels of an alligator trying to debug some code. First panel: A confident looking alligator gets an error message. Second panel: a few minutes later, the error remains and the alligator is looking carefully at their code. Third panel: 10 minutes after that, the error remains and the alligator is giving a frustrated 'RAAAR' while desperately typing. Fourth panel: The error remains, and the alligator looks exhausted and exasperated, and a thought bubble reads 'maybe it's a bug'. Fifth panel: A friendly flamingo comes over to take a look, and reads aloud from the problematic code a spelling error: 'L-E-N-G-H-T'. Only the tail of the alligator is visible as it stomp stomp stomps out of the panel roaring."
width="800"}

# Independent study following the workshop

[Consolidate](study_after_workshop.qmd)

# The Code file

This contains all the code needed in the workshop even where it is not
visible on the webpage.

The `workshop.qmd` file is the file I use to compile the practical. Qmd
stands for Quarto markdown. It allows code and ordinary text to be
interweaved to produce well-formatted reports including webpages. [View
the Qmd in
Browser](https://github.com/3mmaRand/R4BABS/blob/main/r4babs2/week-2/workshop.qmd).
Coding and thinking answers are marked with `#---CODING ANSWER---` and
`#---THINKING ANSWER---`

Pages made with R [@R-core], Quarto [@allaire2022], `knitr` 
[@knitr1; @knitr2; @knitr3],
`kableExtra` [@kableExtra]

# References
