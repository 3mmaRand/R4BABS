---
title: "Workshop"
subtitle: "One-way ANOVA and Kruskal-Wallis"
toc: true
toc-location: right
editor: 
  markdown: 
    wrap: sentence
---

```{r}
#| include: false
library(tidyverse)
library(kableExtra)
```

# Introduction

![Artwork by @allison_horst: "Debugging and feelings"](images/debugging.png){fig-alt="A cartoon of a fuzzy round monster face showing 10 different emotions experienced during the process of debugging code. The progression goes from (1) 'I got this' - looking determined and optimistic; (2) 'Huh. Really thought that was it.' - looking a bit baffled; (3) '...' - looking up at the ceiling in thought; (4) 'Fine. Restarting.' - looking a bit annoyed; (5) 'OH WTF.' Looking very frazzled and frustrated; (6) 'Zombie meltdown.' - looking like a full meltdown; (7) (blank) - sleeping; (8) 'A NEW HOPE!' - a happy looking monster with a lightbulb above; (9) 'insert awesome theme song' - looking determined and typing away; (10) 'I love coding' - arms raised in victory with a big smile, with confetti falling." width="800"}

## Session overview

In this session you will get practice in choosing between, performing, and presenting the results of, one-way ANOVA and Kruskal-Wallis in R.

## Philosophy

Workshops are not a test.
It is expected that you often don't know how to start, make a lot of mistakes and need help.
It is expected that you are familiar with independent study content before the workshop.
However, you need not remember or understand every detail as the workshop should build and consolidate your understanding.
Tips

-   don't worry about making mistakes
-   don't let what you can not do interfere with what you can do
-   discussing code with your neighbours will help
-   look things up in the independent study material
-   look things up in your own code from earlier
-   there are no stupid questions

::: callout-note
## Key

These four symbols are used at the beginning of each instruction so you know where to carry out the instruction.

![](images/do_on_your_computer.png) Something you need to do on your computer.
It may be opening programs or documents or locating a file.

![](images/do_in_R.png) Something you should do in RStudio.
It will often be typing a command or using the menus but might also be creating folders, locating or moving files.

![](images/do_on_internet.png) Something you should do in your browser on the internet.
It may be searching for information, going to the VLE or downloading a file.

![](images/answer.png) A question for you to think about and answer.
Record your answers in your script for future reference.
:::

# Getting started

![](images/do_on_your_computer.png) Start RStudio from the Start menu.

![](images/do_in_R.png) Go the Files tab in the lower right pane and click on the `...` on the right.
This will open a "Go to folder" window.
Navigate to a place on your computer where you keep your work.
Click Open.

![](images/do_in_R.png) Make an RStudio project for this workshop by clicking on the drop-down menu on top right where it says `Project: (None)` and choosing New Project, then New Directory, then New Project.
Navigate to the `data-analysis-in-r-2` folder and name the RStudio Project `week-4`.

![](images/do_in_R.png) Make new folders called `data-raw` and `figures`. You can do this on the Files Pane by clicking New Folder and typing into the box that appears.

![](images/do_in_R.png) Make a new script then save it with a name like `one-way-anova-and-kw.R` to carry out the rest of the work.

![](images/do_in_R.png) Add a comment to the script: `# One-way ANOVA and Kruskal-Wallis` and load the **`tidyverse`** [@tidyverse] package

# Exercises

## Myoglobin in seal muscle

The myoglobin concentration of skeletal muscle of three species of seal in grams per kilogram of muscle was determined and the data are given in [seal.csv](data-raw/seal.csv).
We want to know if there is a difference between species.
Each row represents an individual seal.
The first column gives the myoglobin concentration and the second column indicates species.

![](images/do_on_your_computer.png) Save a copy of the data file [seal.csv](data-raw/seal.csv) to `data-raw`

![](images/do_in_R.png) Read in the data and check the structure.
I used the name `seal` for the dataframe/tibble.

```{r}
#| include: false

#---CODING ANSWER---

seal  <-  read_csv("data-raw/seal.csv")
str(seal)
```

![](images/answer.png) What kind of variables do you have?

<!-- #---THINKING ANSWER---  -->

<!-- we have a categorical variable with three groups and a  -->

<!-- continuous variable which is the response. -->

### Exploring

![](images/do_in_R.png) Do a quick plot of the data. You may need to refer to a previous workshop

```{r}
#| include: false

#---CODING ANSWER---

ggplot(data = seal, aes(x = species, y = myoglobin)) +
  geom_violin()
```

### Summarising the data

Do you remember [Look after future you!](../week-3/workshop.html#look-after-future-you)

![](images/do_in_R.png) If you followed that tip you'll be able to open that script and whizz through summarising,testing and plotting.

![](images/do_in_R.png) Create a data frame called `seal_summary` that contains the means, standard deviations, sample sizes and standard errors for each species.

```{r}
#| include: false

#---CODING ANSWER---

seal_summary <- seal %>%
  group_by(species) %>%
  summarise(mean = mean(myoglobin),
            std = sd(myoglobin),
            n = length(myoglobin),
            se = std/sqrt(n))

```

You should get the following numbers:

```{r}
#| echo: false

knitr::kable(seal_summary) %>% 
  kableExtra::kable_styling()
```

### Applying, interpreting and reporting

We can now carry out a one-way ANOVA using the same `lm()` function we used for two-sample tests.

![](images/do_in_R.png) Carry out an ANOVA and examine the results with:

```{r}
mod <- lm(data = seal, myoglobin ~ species)
summary(mod)
```

Remember: the tilde (`~`) means test the values in `myoglobin` when grouped by the values in `species.` Or explain `myoglobin` with `species`

![](images/answer.png) What do you conclude so far from the test?
Write your conclusion in a form suitable for a report.

<!-- #---THINKING ANSWER---  -->

<!-- There is a significant difference in myoglobin concentration between  -->

<!-- Seal species (F = 5.35; d.f. = 2, 87; p = 0.006). -->

![](images/answer.png) Can you relate the values under `Estimate` to the means?

<!-- #---THINKING ANSWER---  -->

<!-- the line starting (Intercept) is  β0  -->

<!-- the line starting speciesHarbour Seal is β1 -->

<!-- the line starting speciesWeddell Seal β2 -->

<!-- Bladdernose mean is β0 i.e., 42.31 -->

<!-- Harbour mean is β0 + β1 i.e., 42.316 + 6.694 = 49.01 -->

<!-- Weddell mean is β0 + β2  i.e., 42.316 + 2.344 -->

The ANOVA is significant but this only tells us that species matters, meaning at least two of the means differ.
To find out which means differ, we need a post-hoc test.
A post-hoc ("after this") test is done after a significant ANOVA test.
There are several possible post-hoc tests and we will be using Tukey's HSD (honestly significant difference) test [@tukey1949] implemented in the **`emmeans`** [@emmeans] package.

![](images/do_in_R.png) Load the package

```{r}
library(emmeans)
```

![](images/do_in_R.png) Carry out the post-hoc test

```{r}
emmeans(mod, ~ species) |> pairs()

```

Each row is a comparison between the two means in the 'contrast' column. The 'estimate' column is the difference between those means and the 'p.value' indicates whether that difference is significant.

A plot can be used to visualise the result of the post-hoc which can be especially useful when there are very many comparisons.

![](images/do_in_R.png) Plot the results of the post-hoc test:

```{r}
emmeans(mod, ~ species) |> plot()
```

Where the purple bars overlap, there is no significant difference.

![](images/answer.png) What do you conclude from the test?

<!-- #---THINKING ANSWER---  -->

<!-- Harbour and Bladdernose differ signifcantly, p = 0.005 -->

<!-- This is the only significant comparison -->

### Check assumptions

The assumptions of the general linear model are that the residuals -- the difference between predicted value (i.e., the group mean) and observed values - are normally distributed and have homogeneous variance.
To check these we can examine the `mod$residuals` variable.
You may want to refer to [Checking assumptions](../week-2/workshop.html#checking-assumptions) in the "Single regression" workshop.

![](images/do_in_R.png) Plot the model residuals against the fitted values.

```{r}
#| include: false

#---CODING ANSWER-

plot(mod, which = 1)
```

![](images/answer.png) What to you conclude?

<!-- #---THINKING ANSWER--- -->

<!-- The residuals look 'homogeneously' distributed. That is, the variance is the same  -->

<!-- for the two groups  -->

To examine normality of the model residuals we can plot them as a histogram and do a normality test on them.

![](images/do_in_R.png) Plot a histogram of the residuals.

```{r}
#| include: false

#---CODING ANSWER-

ggplot(mapping = aes(x = mod$residuals)) + 
  geom_histogram(bins = 10)
```

![](images/do_in_R.png) Use the `shapiro.test()` to test the normality of the model residuals

```{r}
#| include: false

#---CODING ANSWER-

shapiro.test(mod$residuals)
```

![](images/answer.png) What to you conclude?

<!-- #---THINKING ANSWER--- -->

<!-- the residuals appear roughly normally distributed.  -->

<!-- The histogram is symmetrical and the shapiro test is NS. -->

<!-- Overall, it seems the assumptions are met -->

### Illustrating

![](images/do_in_R.png) Create a figure like the one below.
You may need to refer to [Visualise](../../r4babs1/week-9/workshop.html#visualise) from the "Summarising data with several variables" workshop [@rand2023]

We will again use both our `seal` and `seal_summary` dataframes.

![](images/do_in_R.png) Create the plot:

```{r}
#| echo: false

#---CODING ANSWER---
ggplot() +
  geom_point(data = seal, aes(x = species, y = myoglobin),
             position = position_jitter(width = 0.1, height = 0),
             colour = "grey50") +
  geom_errorbar(data = seal_summary, 
                aes(x = species, ymin = mean - se, ymax = mean + se),
                width = 0.3) +
  geom_errorbar(data = seal_summary, 
                aes(x = species, ymin = mean, ymax = mean),
                width = 0.2) +
  scale_y_continuous(name = "Myoglobin (g/kg)", 
                     limits = c(0, 80), 
                     expand = c(0, 0)) +
  scale_x_discrete(name = "Species") +
  annotate("segment", x = 1, xend = 2,   
           y = 72, yend = 72, 
           colour = "black") +
  annotate("text", x = 1.5,  y = 75,
           label = expression(italic(p)~"= 0.005")) +
  theme_classic()

```

![](images/do_in_R.png) Save your figure to your figures folder.

```{r}
#| echo: false

#---CODING ANSWER---

# Assign the figure to a variable
fig1 <- ggplot() +
  geom_point(data = seal, aes(x = species, y = myoglobin),
             position = position_jitter(width = 0.1, height = 0),
             colour = "grey50") +
  geom_errorbar(data = seal_summary, 
                aes(x = species, ymin = mean - se, ymax = mean + se),
                width = 0.3) +
  geom_errorbar(data = seal_summary, 
                aes(x = species, ymin = mean, ymax = mean),
                width = 0.2) +
  scale_y_continuous(name = "Myoglobin (g/kg)", 
                     limits = c(0, 80), 
                     expand = c(0, 0)) +
  scale_x_discrete(name = "Species") +
  annotate("segment", x = 1, xend = 2,   
           y = 72, yend = 72, 
           colour = "black") +
  annotate("text", x = 1.5,  y = 75,
           label = expression(italic(p)~"= 0.005")) +
  theme_classic()

```

```{r}
#| include: false

#---CODING ANSWER---

# save figure to figures/seal.png
ggsave("figures/seal.png",
       plot = fig1,
       width = 3.5,
       height = 3.5,
       units = "in",
       dpi = 300)

```

## Leafminers on Birch

Larvae of the Ambermarked birch leafminer, *Profenusa thomsoni*, feed on the interior leaf tissues of Birch (Betula) species.
They do not normally kill the tree but can weaken it making it susceptible to attack from other species.
Researchers are interested in whether there is a difference in the rates at which white, grey and yellow birch are attacked.
They introduce adult female *P.thomsoni* to a green house containing 30 young trees (ten of each type) and later count the egg laying events on each tree.
The data are in [leaf.txt](data-raw/leaf.txt).

### Exploring

![](images/do_in_R.png) Read in the data and check the structure.
I used the name `leaf` for the dataframe/tibble.

```{r}
#| include: false

#---CODING ANSWER---

leaf  <-  read_table("data-raw/leaf.txt")
str(leaf)
```

![](images/answer.png) What kind of variables do we have?

<!-- #---THINKING ANSWER---  -->

<!-- we have birch, a categorical variable with three groups, and counts in -->

<!-- eggs  which is the response. counts are numeric but discrete. -->

![](images/do_in_R.png) Do a quick plot of the data.

```{r}
#| include: false

#---CODING ANSWER---

ggplot(data = leaf, aes(x = birch, y = eggs)) +
  geom_boxplot()
```

![](images/answer.png) Using your common sense, do these data look normally distributed?

<!-- #---THINKING ANSWER---  -->

<!-- No and little need to test - they're counts, and have unequal variances -->

![](images/answer.png) Why is a Kruskal-Wallis appropriate in this case?

<!-- #---THINKING ANSWER---  -->

<!-- the data are counts hence they are not continuous. We can sometimes treat  -->

<!-- count data as continuous if there is a large number of possible values and  -->

<!-- the distance between each value relative to the range is small but this is  -->

<!-- not the case here. In addition there are only ten values in each group  -->

![](images/do_in_R.png) Calculate the medians, means and sample sizes.

```{r}
#| include: false

#---CODING ANSWER---
leaf %>% 
  group_by(birch) %>% 
  summarise(mean = mean(eggs),
            median = median(eggs),
            n = length(eggs))
```

### Applying, interpreting and reporting

![](images/do_in_R.png) Carry out a Kruskal-Wallis:

```{r}
kruskal.test(data = leaf, eggs ~ birch)
```

![](images/answer.png) What do you conclude from the test?

<!-- #---THINKING ANSWER---  -->

<!-- There is a significant difference between birch types in  -->

<!-- the number of laying events by *P.thomsoni*  -->

A significant Kruskal-Wallis tells us at least two of the groups differ but where do the differences lie?
The Dunn test is a post-hoc multiple comparison test for a significant Kruskal-Wallis.
It is available in the package **`FSA`**

![](images/do_in_R.png) Load the package using:

```{r}
library(FSA)
```

![](images/do_in_R.png) Run the post-hoc test with:

```{r}
dunnTest(data = leaf, eggs ~ birch)
```

The `P.adj` column gives *p*-value for the comparison listed in the first column.
`Z` is the test statistic.

![](images/answer.png) What do you conclude from the test?

<!-- #---THINKING ANSWER---  -->

<!-- The significant difference is between yellow birch and white  -->

<!-- birch (the highest and lowest number of eggs) -->

![](images/answer.png) Write up the result is a form suitable for a report.

<!-- #---THINKING ANSWER---  -->

<!-- There is a significant difference in the rate of leafminer attack between birch  -->

<!-- species (Kruskal-Wallis: chi-squared = 6.34, df = 2, p-value = 0.042).  -->

<!-- Post-hoc testing revealed that difference to be between the White Birch with the  -->

<!-- lowest number of eggs (median = 14) and Yellow Birch with the highest (median = 54)  -->

<!-- (*z* = 2.52; *p* = 0.035).  -->

### Illustrating

![](images/do_in_R.png) A box plot is an appropriate choice for illustrating a Kruskal-Wallis.
Can you produce a figure like this?

```{r}
#| echo: false

#---CODING ANSWER---
ggplot(leaf, aes(x = birch, y = eggs) ) +
  geom_boxplot() +
  scale_x_discrete(name = "Birch") +
  scale_y_continuous(name = "Number of eggs", 
                     limits = c(0, 110),
                     expand = c(0, 0)) +
  annotate("segment", x = 2, xend = 3, 
           y = 100, yend = 100,
           colour = "black") +
  annotate("text", x = 2.5,  y = 104, 
           label = expression(italic(p)~"= 0.035")) +
  theme_classic()
```

You're finished!

# 🥳 Well Done! 🎉

![Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst](images/tidy-complete.jpg){fig-alt="Cute fuzzy monsters putting rectangular data tables onto a conveyor belt. Along the conveyor belt line are different automated 'stations' that update the data, reading 'WRANGLE', 'VISUALIZE', and 'MODEL.' A monster at the end of the conveyor belt is carrying away a table that reads 'Complete analysis'." width="800"}

# Independent study following the workshop

[Consolidate](study_after_workshop.qmd)


# The Code file

This contains all the code needed in the workshop even where it is not visible on the webpage.

The `workshop.qmd` file is the file I use to compile the practical. Qmd stands for Quarto markdown. It allows code and ordinary text to be interweaved to produce well-formatted reports including webpages. [View the Qmd in Browser](https://github.com/3mmaRand/R4BABS/blob/main/r4babs2/week-4/workshop.qmd). Coding and thinking answers are marked with `#---CODING ANSWER---` and `#---THINKING ANSWER---`

Pages made with R [@R-core], Quarto [@allaire2022], `knitr` [@knitr], `kableExtra` [@kableExtra]

# References
