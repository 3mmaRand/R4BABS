---
title: "Workshop"
subtitle: "Data Analysis 4: Biomedical sciences - Your data presentation"
toc: true
toc-location: right
editor: 
  markdown: 
    wrap: sentence
---

In this workshop you will learn how to:

-   create density plots to visualise the distribution and gating of the signals
-   create a quadrant gated plot of TNFa_APC_Lin signal against the E_coli_FITC_Lin signal.
-   calculate the the percentage of cells in each quadrant
-   annotate plots
-   import from a googlesheet.

You will learn how to make a variety of plots but not *which* plots you should include in your report.
You should select plots to match your narrative and you may need to apply your understanding of picking data for, faceting and annotating plots to get the plot you want.

You should have the processed data files listed below for your own data/the model data.
However, if you do not, you can use the linked files prepared from the sample data

-   [`clean_trans_live_tfna_pos.csv`](data-processed/clean_trans_live_tfna_pos.csv): Each row is a sample (a treatment-antibody combination). For each sample there is: the number of cells after AI cleaning, the number of live cells after gatting, the percentage of live cells, the number TNF-Î± postive cells, the percentage of TNF-Î± postive cells and the of the mean APC signal in the live cells and TNF-Î± postive cells
-   [`live_labelled.csv`](data-processed/live_labelled.csv): Each row is a cell. These are the AI cleaned, live cells with logicle-transformed TNFa_APC_Lin and E_coli_FITC_Lin signals. Each cell is labelled with the sample (filename) it came from, its treatment and antibody, and whether it is TNF-Î± positive (*i.e.* has a TNFa_APC_Lin level above the APC cut off used) or negative and whether it is FITC positive (*i.e.* E_coli_FITC_Lin level above the FITC cut off used) or negative.
-   you may also have the FITC equivalent of `clean_trans_live_tfna_pos.csv`

# Exercises

## Set up

ðŸŽ¬ Open the RStudio project you created in the [Data Analysis 2: Biomedical sciences - Sample data analysis](../week-2/workshop.html) workshop.

ðŸŽ¬ Create a new script called `data-presentation.R`

ðŸŽ¬ Load the **`tidyverse`**:

```{r}
library(tidyverse)
```

ðŸŽ¬ Import the labelled live cell data and the sample summary data

```{r}

# import AI cleaned, logical transformed, live, labelled cell data
clean_trans_live <- read_csv("data-processed/live_labelled.csv")

# import % live summary
clean_trans_live_n <- read_csv("data-processed/clean_trans_live_tfna_pos.csv") 


```

It can helpful to select only the columns we need, especially for the `clean_trans_live` data.
These are: `FS_Lin`, `SS_Lin`, `E_coli_FITC_Lin`, `TNFa_APC_Lin`, `treatment`, `antibody`, `tnfa` and `fitc`

ðŸŽ¬ Select columns of interest:

```{r}
clean_trans_live <- clean_trans_live |> 
  select(FS_Lin, SS_Lin, 
         E_coli_FITC_Lin, 
         TNFa_APC_Lin, 
         treatment, 
         antibody, 
         tnfa, 
         fitc)
```

ðŸŽ¬ View each of the resulting dataframes (click on the name in the environment or use `View()`) to ensure you understand what they contain.

```{r}
#| echo: false
clean_trans_live |> 
  head(n = 100) |> 
  knitr::kable(caption = "clean_trans_live: The AI cleaned, logical transformed, live, labelled cell data (first 100 rows only") |> 
  kableExtra::kable_styling() |> 
  kableExtra::scroll_box(height = "200px")

```

```{r}
#| echo: false
clean_trans_live_n |> 
  knitr::kable(caption = "clean_trans_live_n: sample summaries") |> 
  kableExtra::kable_styling() 

```

By default, categorical variables are plotted in alphabetical order.
The alphabetical order of the antibody type - ISOTYPE, TNFAPC - makes sense since ISOTYPE is the control.
However, that of treatment - ECOLIGreen, LPS, MEDIA - is not.
We will put these in a better order with MEDIA first for the live cell data.

ðŸŽ¬ Use `fct_relevel()` to put treatment groups in order so that our graphs are better to interpret.

```{r}
clean_trans_live <- clean_trans_live |> 
  mutate(treatment = fct_relevel(treatment, c("MEDIA",
                                              "LPS",
                                              "ECOLIGreen")))

```

## Distribution of APC TNF-Î± signal with APC gate

We often want to show the distribution of a signal with the value we used as a threshold (gate) so that readers can evaluate whether the value chosen is appropriate in their opinion.
A distribution is best shown with a histogram or density plot.
We will annotate the distribution of APC TNF-Î± signal with the gate used to define whether the cells are positive or negative for TNF-Î±.
it is useful to assign that value to a variable that we can use in our plots[^1].

[^1]: You might want to look back at [Quality control 3: Gating to determine a â€˜realâ€™ signal](../week-2/workshop.html#quality-control-3-gating-to-determine-a-real-signal) in the week 2 workshop to remind yourself how we determined the gate values for the sample data.

ðŸŽ¬ Assign the TNF-Î± gate value a variable remembering that your number will differ:

```{r}
apc_cut <- 3.8

```

ðŸŽ¬ Also assign the FITC gate value a variable `fitc_cut`:

```{r}
#| include: false

#---CODING ANSWER--- 
# your value will likely differ
fitc_cut <- 2

```

### Plotting one sample

Since the control sample (MEDIA, ISOTYPE) is crucial in determining the APC gating threshold, this is a useful plot.

We first filter the dataframe before plotting it which allows us to pick the sample we want to plot.

ðŸŽ¬ Plot the distribution of the APC TNF-Î± signal for the MEDIA `treatment` and the ISOTYPE `antibody`:

```{r}
clean_trans_live |> 
    filter(treatment == "MEDIA",
           antibody == "ISOTYPE") |>
  ggplot(aes(x = TNFa_APC_Lin)) +
  geom_density(fill = "gray80") +
  geom_vline(xintercept = apc_cut, 
             color = "red") +
  scale_y_continuous(expand = c(0, 0),
                     limits = c(0, 2.5),
                     name = "Density") +
  scale_x_continuous(name = "Logicle transformed APC TNF-Î± signal") +
  theme_bw()

```

-   `geom_vline()` adds a vertical line to the plot at the value of `apc_cut` which is the gate value we determined for the APC TNF-Î± signal.

-   `geom_density()` is a smoothed version of a histogram[^2] and shows the distribution of the data.
    The fill argument sets the colour of the plot to a light grey.

-   the expand argument in a `scale_x_....` or `scale_y_....` sets the axis line at zero rather than being below it.

[^2]: You can use a histogram if you prefer.
    You will need different limits on the *y* axis.

#### Plot annotation

You have (at least) three options for adding the summary statistics to the plot.

1.  Most simple: adding in word/googledocs (or whatever you write your report in).

    Save the plot using `ggsave()`, insert as an image into your report and a text box.

2.  In R by hard coding the values in the `annotate()` function.
    The values themselves you have calculated and are in the `clean_trans_live_n` dataframe

```{r}

clean_trans_live |> 
  filter(treatment == "MEDIA",
         antibody == "ISOTYPE") |>
  ggplot(aes(x = TNFa_APC_Lin)) +
  geom_density(fill = "gray80") +
  geom_vline(xintercept = apc_cut, 
             color = "red") +
  annotate(geom = "text",
           label = "0.2 % cells\nTNF-Î± +'ve\nMFI = 3.95",
           x = 4.1,
           y = 2,
           colour = "red") +
  scale_y_continuous(expand = c(0, 0),
                     limits = c(0, 2.5),
                     name = "Density") +
  scale_x_continuous(name = "Logicle transformed APC TNF-Î± signal") +
  theme_bw()

```

3.  In R and fully reproducibly by using the `clean_trans_live_n` dataframe with the summary statistics in `geom_text()`. That dataframe also needs filtering to the sample you are plotting. I have also rounded the `mean_apc` value to 2 decimal places.

```{r}
clean_trans_live |> 
  filter(treatment == "MEDIA",
         antibody == "ISOTYPE") |>
  ggplot(aes(x = TNFa_APC_Lin)) +
  geom_density(fill = "gray80") +
  geom_vline(xintercept = apc_cut, 
             color = "red") +
  geom_text(data = clean_trans_live_n |> 
              filter(treatment == "MEDIA",
                     antibody == "ISOTYPE"), 
            aes(label = paste0(perc_pos_tnfa, 
                               "% cells\nTNF-Î± +'ve\nMean = ",
                               round(mean_apc, 2))), 
           x = 4.1,
           y = 2,
            colour = "red") +
  scale_y_continuous(expand = c(0, 0),
                     limits = c(0, 2.5),
                     name = "Density") +
  scale_x_continuous(name = "Logicle transformed APC TNF-Î± signal") +
  theme_bw()

```

This has several advantages:

-   if the data changes, the plot annotation will update automatically just as the distribution will.

-   extending to multiple facets requires little extra work.

### Write to file

Whatever method you decide to use for annotation, you will need to save your figure as an image.

ðŸŽ¬ Assign the plot to `apc_distibution_media_isotype`

```{r}
apc_distibution_media_isotype <- clean_trans_live |> 
  filter(treatment == "MEDIA",
         antibody == "ISOTYPE") |>
  ggplot(aes(x = TNFa_APC_Lin)) +
  geom_density(fill = "gray80") +
  geom_vline(xintercept = apc_cut, 
             color = "red") +
  geom_text(data = clean_trans_live_n |> 
              filter(treatment == "MEDIA",
                     antibody == "ISOTYPE"), 
            aes(label = paste0(perc_pos_tnfa, 
                               "% cells\nTNF-Î± +'ve\nMean = ",
                               round(mean_apc, 2))), 
           x = 4.1,
           y = 2,
            colour = "red") +
  scale_y_continuous(expand = c(0, 0),
                     limits = c(0, 2.5),
                     name = "Density") +
  scale_x_continuous(name = "Logicle transformed APC TNF-Î± signal") +
  theme_bw()
```

ðŸŽ¬ Save the plot to a file:

```{r}
ggsave("figures/apc_distibution_media_isotype.png",
       device = "png",
       plot = apc_distibution_media_isotype,
       width = 4,
       height = 2.5,
       units = "in",
       dpi = 300)
```

### Multiple facets

To plot all the samples in one go we can use `facet_grid()`.
`treatment ~ antibody` puts the treatments in rows and the antibodies in columns.
Now do not need to filter the data to a single sample.

ðŸŽ¬ Plot the distribution of the APC TNF-Î± signal for all samples:

```{r}

clean_trans_live |> 
  ggplot(aes(x = TNFa_APC_Lin)) +
  geom_density(fill = "gray80") +
  geom_vline(xintercept = apc_cut, 
             color = "red") +
   geom_text(data = clean_trans_live_n, 
             aes(label = paste0(perc_pos_tnfa, 
                                "% cells\nTNF-Î± +'ve\nMFI = ",
                                round(mean_apc, 2))), 
             x = 6, 
             y = 1.7,
             colour = "red") +
  scale_y_continuous(expand = c(0, 0),
                     limits = c(0, 2.5),
                     name = "Density") +
  scale_x_continuous(name = "Logicle transformed APC TNF-Î± signal") +
  facet_grid(treatment ~ antibody) +
  theme_bw()
```

::: callout-important
## Methods of annotation for faceted plots

Note that adding plot annotations manually (method 1) and using R fully reproducibly (method 3) are possible on faceted plots but method 2 is not because you need the annotations to change with values in treatment and antibody.
:::

::: callout-tip
## Tip for your own plots

You can combine filtering data and faceted plots to do facet plots of a subset of the samples.
For example, you could filter for the ISOTYPE antibody and facet for the treatment.
:::

### Overlay instead of facets

Using facets is *one* way to show multiple samples in one plot.
Another is to overlay the plots by mapping the `fill` aesthetic to the `antibody` variable.
Making the fill semi-transparent with `alpha = 0.3` allows you to see the overlap of the distributions.

ðŸŽ¬ Overlay the distribution of the APC TNF-Î± signals for the media treated samples:

```{r}
clean_trans_live |> 
   filter(treatment == "MEDIA") |>
   ggplot(aes(x = TNFa_APC_Lin, fill = antibody)) +
   geom_density(alpha = 0.3) +
   geom_vline(xintercept = apc_cut, 
              color = "red") +
   scale_y_continuous(expand = c(0, 0),
                      limits = c(0, 2.5)) +
   scale_x_continuous(name = "Logicle transformed APC TNF-Î± signal") +
   theme_bw() 
```

To use colours other than the default, we need to used a `scale_fill_...` function.
These functions can also be used to change the name (`name = ...`) of the legend and the names (`labels = c(...)`) of each group.
`scale_fill_manual()` allows to specify the colours (`values = c(...)`) manually.
So you might add:

`scale_fill_manual(values = c("green", "blue"))`

I like to use the viridis scales.
The viridis scales provide colour maps that are perceptually uniform in both colour and black-and-white.
They are also designed to be perceived by viewers with common forms of colour blindness.
See [Introduction to viridis](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html#introduction) for more information.
We do not have to know the names/codes for the colours because **`ggplot2`** provides these in special `scale_fill_...` functions.

Here I use `scale_fill_viridis_d()`.
The d stands for discrete - `antibody`, the variable mapped to `fill`, is discrete.
The function `scale_fill_viridis_c()` would be used for continuous data.
I've used the default "viridis" (or "D") option (do `?scale_fill_viridis_d` for all the options).
I also removed the "antibody" name and moved the legend.

```{r}
clean_trans_live |> 
   filter(treatment == "MEDIA") |>
   ggplot(aes(x = TNFa_APC_Lin, fill = antibody)) +
   geom_density(alpha = 0.3) +
   geom_vline(xintercept = apc_cut, 
              color = "red") +
   scale_fill_viridis_d(name = NULL, end = 0.7) +
   scale_y_continuous(expand = c(0, 0),
                      limits = c(0, 2.5)) +
   scale_x_continuous(name = "Logicle transformed APC TNF-Î± signal") +
   theme_bw() +
   theme(legend.title = element_blank(),
        legend.position = c(0.85, 0.85)) 
```

ðŸŽ¬ Can you workout how to annotate this plot?

```{r}
#| include: false

#---CODING ANSWER--- 
clean_trans_live |> 
  filter(treatment == "MEDIA") |>
  ggplot(aes(x = TNFa_APC_Lin, fill = antibody)) +
  geom_density(alpha = 0.3) +
  geom_vline(xintercept = apc_cut, 
             color = "red") +
  scale_fill_viridis_d(name = NULL, end = 0.8) +
  geom_text(data = clean_trans_live_n |> 
              filter(treatment == "MEDIA",
                     antibody == "ISOTYPE"), 
            aes(label = paste0(perc_pos_tnfa, 
                               "% cells, TNF-Î± +'ve, Mean = ",
                               round(mean_apc, 2))), 
            x = 4.8,
            y = 2.25,
            colour = viridisLite::viridis(2, end = 0.8)[1]) +
  geom_text(data = clean_trans_live_n |> 
              filter(treatment == "MEDIA",
                     antibody == "TNFAPC"), 
            aes(label = paste0(perc_pos_tnfa, 
                               "% cells, TNF-Î± +'ve, Mean = ",
                               round(mean_apc, 2))), 
            x = 4.8,
            y = 2,
            colour = viridisLite::viridis(2, end = 0.8)[2])+
  scale_y_continuous(expand = c(0, 0),
                     limits = c(0, 2.5)) +
  scale_x_continuous(name = "Logicle transformed APC TNF-Î± signal") +
  theme_bw() +
  theme(legend.title = element_blank(),
        legend.position = c(0.85, 0.85),
        legend.key.size = unit(0.8, "cm")) 

```

## A figure to report baselines for both signals

We created the figure below in [Week 2](../week-2/workshop.html#a-figure-to-report-baselines-for-both-signals)

```{r}
ggplot(clean_trans_live, aes(x = E_coli_FITC_Lin, 
                                  y = TNFa_APC_Lin)) +
  geom_hex(bins = 128) +
  geom_hline(yintercept = apc_cut, 
             color = "red") +
    geom_vline(xintercept = fitc_cut, 
             color = "red") +
  scale_fill_viridis_c() +
  facet_grid(antibody ~ treatment) +
  theme_bw()
```

We might want to annotate this figure with the percentage of cells in each quadrant in each sample.
To do that, we need to Calculate % of cells in each quadrant.

### Calculate % of cells in each quadrant

We want to calculate the the percentage of cells in each quadrant of the quadrant gated plot of TNFa_APC_Lin signal against the E_coli_FITC_Lin signal.
The means finding the number of cells labelled as:

-   TNF-Î± -'ve and FITC -'ve
-   TNF-Î± -'ve and FITC +'ve
-   TNF-Î± +'ve and FITC -'ve
-   TNF-Î± +'ve and FITC +'ve

```{r}
#| echo: false
ggplot(clean_trans_live, aes(x = E_coli_FITC_Lin, 
                                  y = TNFa_APC_Lin)) +
  geom_hline(yintercept = apc_cut, 
             color = "red") +
    geom_vline(xintercept = fitc_cut, 
             color = "red") +
  scale_x_continuous(limits = c(1, 4.5)) +
  scale_y_continuous(limits = c(2.5, 6.5)) +
  annotate(geom = "text", label = "TNF-Î± -'ve \n FITC -'ve", x = 1.5, y = 3) +
  annotate(geom = "text", label = "TNF-Î± -'ve \n FITC +'ve", x = 3.5, y = 3) +
  annotate(geom = "text", label = "TNF-Î± +'ve \n FITC -'ve", x = 1.5, y = 5) +
  annotate(geom = "text", label = "TNF-Î± +'ve \n FITC +'ve", x = 3.5, y = 5) +
  theme_bw()
  
```

ðŸŽ¬ Calculate the number of cells in each quadrant for each sample:

```{r}
## calculate the number of cells in each quadrant
all_combin_n <- clean_trans_live |> 
  group_by(antibody, treatment, tnfa, fitc) |>
  summarise(n_quad = n()) 

```

Grouping by `antibody` and `treatment` ensures we get values for each sample.
The `tnfa` and `fitc` columns give whether a cell is positive or negative for that signal.

ðŸŽ¬ Click on the data frame in the environment window to view it and make sure you have an understanding of the data.

```{r}
#| echo: false
all_combin_n |> 
  knitr::kable(caption = "all_combin_n: number of cells in each quadrant for each sample") |> 
  kableExtra::kable_styling() |> 
  kableExtra::scroll_box(height = "200px")


```

As there are four quadrants and six samples, you would expect 24 rows in the data frame.
However, there are only 23 rows.
This is because there are no cells in the quadrant where both cells are positive for both TNF-Î± and FITC for the ISOTYOPE antibody and MEDIA treated samples.
Since we are probably happy not to annotate a figure with 0 %, this is fine.

To calculate the percentage of cells in each quadrant, we need to join this dataframe with the number of non-debris cells for each sample, *i.e.,* `clean_trans_live_n`

ðŸŽ¬ Calculate the percentage of cells in each quadrant for each sample:

```{r}
all_combin_perc <- all_combin_n |> 
  left_join(clean_trans_live_n, 
            by = c("antibody", "treatment")) |> 
  mutate(perc_quad = round(n_quad / n_live * 100, 1)) |> 
  filter(perc_quad > 0)

```

I have additionally filtered out rows where the % cells rounds to 0.
This is again because we are probably happy not to annotate a figure with 0 %.

ðŸŽ¬ Click on the data frame in the environment window to view it and make sure you have an understanding of the data.

```{r}
#| echo: false
all_combin_perc |> 
  knitr::kable() |> 
  kable_styling() |> 
  scroll_box(height = "200px")

```

::: callout-tip
## Tip for your own plots

You can combine the concept of annotation and faceted plots to annotate a quadrant gated plot of TNFa_APC_Lin signal against the E_coli_FITC_Lin signal.

Because the annotation for each quadrant is in a different place, you will need to use four `geom_text()` one for each quadrant and you will need to filter appropriately.

Remember you also have the option to annotate manually.
:::

## Importing class data

The [BIO00066I Biomedical Sciences class data](https://docs.google.com/spreadsheets/d/1wgQ9goCvYnO44sSHVvP37nFJM12mG8nibdpOOx7ZP9Q/edit?usp=drive_link) are in a google sheet.

You have a couple of options for importing this:

-   download the file as an excel file or .csv and import that

-   import the data directly from the google sheet into R.
    An advantage of using the google sheet is you won't have to remember to download the data when someone updates it.

::: callout-important
## Google sheet closure

The spreadsheet will be closed for input on **Friday 21 March (week 6)** so people can make conclusions about the class data without being concerned it will change.
:::

### Importing from a googlesheet

You can use the **`googlesheets4`** package [@googlesheets4] to do this.

```{r}
#| eval: false
library(googlesheets4)
```

```{r}
#| eval: false
file <- "https://docs.google.com/spreadsheets/d/1wgQ9goCvYnO44sSHVvP37nFJM12mG8nibdpOOx7ZP9Q/edit?gid=0#gid=0"
```

```{r}
#| eval: false
class_data <- read_sheet(file, sheet = "data")
```

You will be asked to authenticate in your browser. This message will 
appear in the console and the browser should open
```         
Waiting for authentication in browser...
Press Esc/Ctrl + C to abort
```
You can Allow 
"Tidyverse API Packages wants to access your Google Account".

The data should then read in.
```         
Authentication complete.
âœ” Reading from BIO00066I Biomedical Sciences class data.
âœ” Range ''data''.
```


Note that you will probably want to do some quality control such has 
filtering out rows with missing data in important columns.
We did this in the 
[Data Analysis 1: Core](../week-1/workshop.html#quality-control) 
workshop.

## Analysis of the class data

The class data has the summary statistics. You do not need to apply
flowcytometry methods to these that. You should be able to apply 
techniques you have learned in stage 1 to the class data.


Stage 1

-   [Data Analysis in R for Becoming a Bioscientist 1](../../r4babs1/r4babs1.html) [@rand2023].
    Core concepts about scientific computing, types of variable, the role of variables in analysis and how to use RStudio to organise analysis and import, summarise and plot data.

-   [Data Analysis in R for Becoming a Bioscientist 2](../../r4babs2/r4babs2.html) [@rand2023].
    The logic of hypothesis testing, confidence intervals, what is meant by a statistical model, two-sample tests and one- and two-way analysis of variance (ANOVA).

-   Supporting book [Computational Analysis for Bioscientists](https://3mmarand.github.io/comp4biosci/) [@Rand_Comp_Analysis]

# Independent study following the workshop

[Consolidate](study_after_workshop.qmd)

# The Code file

This contains all the code needed in the workshop even where it is not visible on the webpage.

The `workshop.qmd` file is the file I use to compile the practical.
Qmd stands for Quarto markdown.
It allows code and ordinary text to be interweaved to produce well-formatted reports including webpages.
[View the Qmd in Browser](https://github.com/3mmaRand/R4BABS/blob/main/r4babs4/week-6/workshop.qmd).
Coding and thinking answers are marked with `#---CODING ANSWER---` and `#---THINKING ANSWER---`

Pages made with R [@R-core], Quarto [@allaire2022], `knitr` [@knitr1; @knitr2; @knitr3], `kableExtra` [@kableExtra]

# References
