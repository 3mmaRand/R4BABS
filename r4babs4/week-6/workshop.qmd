---
title: "Workshop"
subtitle: "Data Analysis 4: Immunobiology - Your data presentation"
toc: true
toc-location: right
editor: 
  markdown: 
    wrap: sentence
---

```{r}
#| include: false

library(kableExtra)
```

In this workshop

# Exercises

## Add your data

Enter these in the [BIO00066I Biomedical Sciences class data](https://docs.google.com/spreadsheets/d/104EXdgsiIq-FuRF9Ly9zewEVdpkVWbyOwxSAmiqJepg/edit#gid=0)

The columns you must add are:

-   `apc_mfi`: Mean fluorescence intensity of the logicle transformed TNFa_APC_Lin in the TNF-Î± positive cells

-   `perc_tfna_pos`: % non debris cells that are TNF-Î± positive cells

The other columns are calculations you make along the way and may help you get to the `apc_mfi` and `perc_tfna_pos` values.
The column names are the same as those used in the [Data Analysis 2: Immunobiology - Sample data analysis](../week-2/workshop.html) workshop.

## Set up

ðŸŽ¬ Open the RStudio project you created in the [Data Analysis 2: Immunobiology - Sample data analysis](../week-2/workshop.html) workshop.

ðŸŽ¬ Create a new script called `data-presentation.R`

ðŸŽ¬ Load packages:

```{r}
library(tidyverse)
```

ðŸŽ¬ Save a copy of [live_labelled.csv](data-raw/live_labelled.csv) to your `data-processed` folder.
These cells have been AI cleaned, gated to remove debris and dead cells, and labelled as positive or negative for the E_coli_FITC_Lin and TNFa_APC_Lin signals[^1].

[^1]: [Data Analysis 2: Immunobiology - Sample data analysis](../week-2/workshop.html) workshop has been amended to include the instruction to save these data at the end.

ðŸŽ¬ Import the data:

```{r}
clean_trans_nondebris <- read_csv("data-processed/live_labelled.csv")

```
ðŸŽ¬ Use `fct_relevel()` to put treatment groups in order so that our graphs are better to interpret.

```{r}
clean_trans_nondebris <- clean_trans_nondebris |> 
  mutate(treatment = fct_relevel(treatment, c("MEDIA",
                                              "LPS",
                                              "ECOLIGreen")))
```


```{r}
# number of cells in each sample after gating
clean_trans_nondebris_n <-  clean_trans_nondebris |> 
  group_by(antibody, treatment) |> 
  summarise(n_nondebris = n()) 
```



ðŸŽ¬

```{r}
## summarise the number of TNF-Î± +'ve cells in each sample  
clean_trans_nondebris_tfna_pos <- clean_trans_nondebris |> 
  filter(tnfa == "TNF-Î± +'ve") |>
  group_by(antibody, treatment) |>
  summarise(n_pos_tnfa = n(),
            mean_apc = round(mean(TNFa_APC_Lin), 2))

## join the summary with the summary of the number of cells in each sample
## and calculate the percentage of cells that are TNF-Î± +'ve
clean_trans_nondebris_tfna_pos <- 
  clean_trans_nondebris_tfna_pos |> 
  left_join(clean_trans_nondebris_n, by = c("antibody", "treatment")) |> 
  mutate(perc_tfna_pos = round(n_pos_tnfa/n_nondebris * 100, 1) )
```



## Distribution of one variable with gate

ðŸŽ¬ apc cut

```{r}
apc_cut <- 2
fitc_cut <- 2

```

### Multiple facets

ðŸŽ¬ 
```{r}
clean_trans_nondebris |> 
  ggplot(aes(x = TNFa_APC_Lin)) +
  geom_density(fill = "gray80") +
  geom_vline(xintercept = apc_cut, 
             color = "red") +
  facet_grid(treatment ~ antibody) +
  theme_bw()
```

ðŸŽ¬

```{r}
clean_trans_nondebris |> 
  filter(treatment == "MEDIA") |>
  ggplot(aes(x = TNFa_APC_Lin)) +
  geom_density(fill = "gray80") +
  geom_vline(xintercept = apc_cut, 
             color = "red") +
  facet_grid(~ antibody) +
  theme_bw()
```

ðŸŽ¬

```{r}
clean_trans_nondebris |> 
  filter(treatment == "MEDIA") |>
  ggplot(aes(x = TNFa_APC_Lin)) +
  geom_density(fill = "gray80") +
  geom_vline(xintercept = apc_cut, 
             color = "red") +
  scale_y_continuous(expand = c(0, 0),
                       limits = c(0, 2.5),
                       name = "Density") +
  scale_x_continuous(name = "Logicle transformed APC TNF-Î± signal") +
  facet_grid(~ antibody) +
  theme_bw()
```


### Plot annotation multiple facets

1.  Most simple: in word/googledocs

2.  In R and fully reproducibly

ðŸŽ¬

```{r}
clean_trans_nondebris |> 
  filter(treatment == "MEDIA") |>
  ggplot(aes(x = TNFa_APC_Lin)) +
  geom_density(fill = "gray80") +
  geom_vline(xintercept = apc_cut, 
             color = "red") +
  geom_text(data = clean_trans_nondebris_tfna_pos |> 
              filter(treatment == "MEDIA"), 
            aes(label = paste0(perc_tfna_pos, 
                               "% cells\nTNF-Î± +'ve\nMFI = ",
                               mean_apc)), 
            x = 3, 
            y = 2,
            colour = "red",
            size = 3) +
  scale_y_continuous(expand = c(0, 0),
                     limits = c(0, 2.5),
                     name = "Density") +
  scale_x_continuous(name = "Logicle transformed APC TNF-Î± signal") +
  facet_grid(~ antibody) +
  theme_bw()
```
### Write to file

ðŸŽ¬ Assign the plot to `apc_distibution_media`

```{r}
apc_distibution_media <- clean_trans_nondebris |> 
  filter(treatment == "MEDIA") |>
  ggplot(aes(x = TNFa_APC_Lin)) +
  geom_density(fill = "gray80") +
  geom_vline(xintercept = apc_cut, 
             color = "red") +
  geom_text(data = clean_trans_nondebris_tfna_pos |> 
              filter(treatment == "MEDIA"), 
            aes(label = paste0(perc_tfna_pos, 
                               "% cells\nTNF-Î± +'ve\nMFI = ",
                               mean_apc)), 
            x = 3, 
            y = 2,
            colour = "red",
            size = 3) +
  scale_y_continuous(expand = c(0, 0),
                     limits = c(0, 2.5),
                     name = "Density") +
  scale_x_continuous(name = "Logicle transformed APC TNF-Î± signal") +
  facet_grid(~ antibody) +
  theme_bw()
```



ðŸŽ¬ Save the plot to a file:

```{r}
ggsave("figures/apc_distibution_media.png",
       device = "png",
       plot = apc_distibution_media,
       width = 4,
       height = 2.5,
       units = "in",
       dpi = 300)
```


### Overlay instead of facets

```{r}
clean_trans_nondebris |> 
   filter(treatment == "MEDIA") |>
   ggplot(aes(x = TNFa_APC_Lin, fill = antibody)) +
   geom_density(alpha = 0.3) +
   geom_vline(xintercept = apc_cut, 
              color = "red") +
   scale_fill_viridis_d(name = NULL) +
   scale_y_continuous(expand = c(0, 0),
                      limits = c(0, 2.5)) +
   scale_x_continuous(name = "Logicle transformed APC TNF-Î± signal") +
   theme_bw() +
   theme(legend.position = c(0.8, 0.85)) 
```






## Percentage of cells in each quadrant

Calculate the the percentage of cells in each quadrant of a quadrant gated gated plot of TNFa_APC_Lin signal against the E_coli_FITC_Lin


```{r}
 ## summarise the number of FITC +'ve cells in each sample  
clean_trans_nondebris_fitc_pos <- clean_trans_nondebris |>
  filter(fitc == "FITC +'ve") |>
  group_by(antibody, treatment, .drop = FALSE) |>
  summarise(n_pos_fitc = n(),
            mean_fitc = round(mean(E_coli_FITC_Lin), 2))

## join the summary with the summary of the number of cells in each sample
## and calculate the percentage of cells that are FITC +'ve
clean_trans_nondebris_fitc_pos <- 
  clean_trans_nondebris_fitc_pos |> 
  left_join(clean_trans_nondebris_n, by = c("antibody", "treatment")) |> 
  mutate(perc_fitc_pos = round(n_pos_fitc/n_nondebris * 100, 1) )




## calculate the percentage of cells in each quadrant
all_combin_n <- clean_trans_nondebris |> 
  group_by(antibody, treatment, tnfa, fitc, .drop = FALSE) |>
  summarise(n = n())

all_combin_perc <- clean_trans_nondebris_n |> 
  select(n_nondebris, antibody, treatment) |> 
  right_join(all_combin_n, by = c("antibody", "treatment")) |> 
  mutate(perc = round(n / n_nondebris * 100, 1)) |> 
  filter(perc > 0)


```





## Importing from google sheets

The [BIO00066I Biomedical Sciences class data](https://docs.google.com/spreadsheets/d/104EXdgsiIq-FuRF9Ly9zewEVdpkVWbyOwxSAmiqJepg/edit#gid=0) are in a google sheet.
You can download the file as an excel file for .csv.
file but it is also possible to import the data directly from the google sheet into R.
Use whatever you prefer.
An advantage of using the google sheet is you won't have to remember to download the data when someone updates it.

You can use the `googlesheets4` package [@googlesheets4] to do this.

```{r}
library(googlesheets4)
```


```{r}

```



# Independent study following the workshop

[Consolidate](study_after_workshop.qmd)

# The Code file

This contains all the code needed in the workshop even where it is not visible on the webpage.

The `workshop.qmd` file is the file I use to compile the practical.
Qmd stands for Quarto markdown.
It allows code and ordinary text to be interweaved to produce well-formatted reports including webpages.
[View the Qmd in Browser](https://github.com/3mmaRand/R4BABS/blob/main/r4babs4/week-6/workshop.qmd).
Coding and thinking answers are marked with `#---CODING ANSWER---` and `#---THINKING ANSWER---`

Pages made with R [@R-core], Quarto [@allaire2022], `knitr` [@knitr], `kableExtra` [@kableExtra]

# References
