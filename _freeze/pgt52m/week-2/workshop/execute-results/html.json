{
  "hash": "ab12d5bf9a93da8a1fc498ad9d433970",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Workshop\"\nsubtitle: \"Introduction to RStudio and your first graphs\"\ntoc: true\ntoc-location: right\n---\n\n\n\n# Introduction\n\n![Artwork by @allison_horst: \"Welcome to\nRstats\"](images/welcome_to_rstats_twitter.png){fig-alt=\"Two fuzzy monsters \nstanding side-by-side outside of a door frame through which is a magical \nwonderland of different R communities, with a 'mind blown' rainbow coming \nout of the one closest to the door. A welcome mat says 'Welcome'.\" width=\"800\"}\n\n## Session overview\n\nIn this workshop you will use RStudio to write R code. You will type\nin some data, plot it and then customise your plot.\n\n## Philosophy\n\nWorkshops are not a test. It is expected that you often don't know how\nto start, make a lot of mistakes and need help. It is expected that you\nare familiar with independent study content before the workshop.\nHowever, you need not remember or understand every detail as the\nworkshop should build and consolidate your understanding. Tips\n\n-   don't worry about making mistakes\n-   don't let what you can not do interfere with what you can do\n-   discussing code with your neighbours will help\n-   look things up in the independent study material\n-   look things up in your own code from earlier workshops\n-   there are no stupid questions\n\n::: callout-note\n## Key\n\nThese four symbols are used at the beginning of each instruction so you\nknow where to carry out the instruction.\n\n![](images/do_on_your_computer.png) Something you need to do on your\ncomputer. It may be opening programs or documents or locating a file.\n\n![](images/do_in_R.png) Something you should do in RStudio. It will\noften be typing a command or using the menus but might also be creating\nfolders, locating or moving files.\n\n![](images/do_on_internet.png) Something you should do in your browser\non the internet. It may be searching for information, going to the VLE\nor downloading a file.\n\n![](images/answer.png) A question for you to think about and answer.\nRecord your answers in your script for future reference.\n:::\n\n# Getting started\n\n![](images/do_on_your_computer.png) Start RStudio from the Start menu.\n\n![](images/do_in_R.png) Go the Files tab in the lower right pane and\nclick on the `...` on the right. This will open a \"Go to folder\" window.\nNavigate to a place on your computer where you keep your work. Click\nOpen.\n\n![](images/do_in_R.png) Also on the Files tab click on `New Folder`.\nType \"data-analysis-in-r-1\" in to the box. This will be the folder that\nwe work in throughout.\n\n![](images/do_in_R.png) Make an RStudio project for this workshop by\nclicking on the drop-down menu on top right where it says\n`Project: (None)` and choosing New Project, then New Directory, then New\nProject. Name the RStudio Project 'week-2'.\n\n![](images/do_in_R.png) Make a new script then save it with a name like\nanalysis.R to carry out the rest of the work.\n\n![](images/do_in_R.png) Add a comment to the script:\n`# Introduction to RStudio and your first graph`\n\n# Exercises\n\n## üêà Coat colour of cats\n\n### The goal\n\nWe will work with some data on the coat colour of 62 cats. You are going\nto type data in R, summarise and plot it\n\nThe data are as a frequency table:\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table style=\"width:30%; margin-left: auto; margin-right: auto;\" class=\"table\">\n<caption>Frequency of coat colours in 62 cats</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Coat colour </th>\n   <th style=\"text-align:right;\"> No. cats </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> black </td>\n   <td style=\"text-align:right;\"> 23 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> white </td>\n   <td style=\"text-align:right;\"> 15 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tabby </td>\n   <td style=\"text-align:right;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ginger </td>\n   <td style=\"text-align:right;\"> 10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tortoiseshell </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> calico </td>\n   <td style=\"text-align:right;\"> 1 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nYou will create a figure like this:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-3-1.png){width=4200}\n:::\n:::\n\n\n## Creating the data\n\nStart by making a vector called `coat` that holds coat colours\n\n![](images/do_in_R.png) Write the following in your script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# coat colours\ncoat <- c(\"black\", \"white\", \"tabby\", \"ginger\", \"tortoiseshell\", \"calico\")\n```\n:::\n\n\nRemember, the shortcut for `<-` is Alt+- (hold the Alt key down then hit\nthe minus key ).\n\nNotice I have used a comment. Comment your code as much as possible!\n\n![](images/do_in_R.png) Ensure your cursor is on the line with the\ncommand and do Control+Enter to send the command to the console to be\nexecuted.\n\n![](images/do_in_R.png) Examine the 'structure' of the `coat` object\nusing `str()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(coat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n chr [1:6] \"black\" \"white\" \"tabby\" \"ginger\" \"tortoiseshell\" \"calico\"\n```\n\n\n:::\n:::\n\n\nIt's vector of 6 character values, `chr`\n\n![](images/do_in_R.png) Create a vector called `freq` containing the\nnumbers of cats with each coat colour and examine it with `str()`.\n\n\n\n![](images/do_in_R.png) Check `sum(freq)` gives the answer you expect:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the total Number of cats\nsum(freq)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 62\n```\n\n\n:::\n:::\n\n\n## Packages\n\nCommands like `c()`, `sum()`, and `str()` are in packages which are part\nthe 'base' R system. A package is a collection of related commands. Base\npackages are installed automatically when you install R.\n\nOther packages, such as **`ggplot2`** [@ggplot2] need to be installed\nonce and then loaded each session. **`ggplot2`** is one of the\n**`tidyverse`** [@tidyverse] packages.\n\n::: callout-important\n## Important\n\n**If you are working on a University computer (or the VDS) you *do not*\nneed to install **`tidyverse`**.**\n\nIf you are working on your own computer or using RStudio cloud you *do*\nneed to install **`tidyverse`**.\n\nTo install a package:\n\nGo the Packages tab on the lower right pane.\nClick Install and type **`tidyverse`** into the box that appears. DO\n**not** do if working on a Uni computer.\n\nWait until you get the prompt back. It will take a few moments, be\npatient!\n:::\n\nTo use a package which is installed you have to load it with the\n`library()` function. You will need to do this whether you are working\non your own computer or on a University computer\n\n![](images/do_in_R.png) Load the **`tidyverse`**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nYou will likely be warned of some function name conflicts but these will\nnot be a problem for you.\n\n## Plotting the data with `ggplot()`\n\n`ggplot()` takes a dataframe for an argument\n\nWe can make a dataframe of the two vectors, `coat` and `freq` using the\n`data.frame()` function.\n\n![](images/do_in_R.png) Make a dataframe called `coat_data`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoat_data <- data.frame(coat, freq)\n```\n:::\n\n\n![](images/do_in_R.png) Check the structure of `coat_data`\n\n\n\nClick on `coat_data` in the Environment to open a spreadsheet-like view\nof it.\n\n## A barplot\n\n![](images/do_in_R.png) Create a simple barplot using `ggplot` like\nthis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-11-1.png){width=4200}\n:::\n:::\n\n\n`ggplot()` alone creates a blank plot.\n\n`ggplot(data = coat_data)` looks the same.\n\n`aes()` gives the 'Aesthetic mappings'. How variables (columns) are\nmapped to visual properties (aesthetics) e.g., axes, colour, shapes.\n\nThus...\n\n`ggplot(data = coat_data, aes(x = coat, y = freq))` produces a plot with\naxes\n\n`geom_col` A 'Geom' (Geometric object) gives the visual representations\nof the data: points, lines, bars, boxplots etc.\n\nNote that `ggplot2` is the name of the package and `ggplot()` is its\nmost important command.\n\n## Using the help manual\n\n'Arguments' can be added to the `geom_col()` command inside the\nbrackets.\n\nCommands do something and their arguments (in brackets) and can specify:\n\n-   what object to do it to\\\n-   how exactly to do it\n\nMany arguments have defaults so you don't always need to supply them.\n\n![](images/do_in_R.png) Open the manual page for `geom_col()` using:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?geom_col\n```\n:::\n\n\nThe manual page has several sections.\n\n-   **Description** an overview of what the command does\\\n-   **Usage** lists arguments\n    -   form: argument name = default value\\\n    -   some arguments MUST be supplied others have defaults\n    -   `...` means etc and includes arguments that can be passed to\n        many 'geoms'\n-   **Arguments** gives the detail about the arguments\n-   **Details** describes how the command works in more detail\\\n-   **Value** gives the output of the command\n-   Don't be too perturbed by not fully understanding the information\n\n## Customising the plot\n\n### Bar colour\n\n![](images/do_in_R.png) Change the fill of the bars using `fill`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\")\n```\n\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-13-1.png){width=4200}\n:::\n:::\n\n\nColours can be given by their name, \"lightblue\" or code, \"#ADD8E6\".\n\nLook up by [name](assets/colournames.pdf) or\n[code](assets/colourhex.pdf)\n\n![](images/do_in_R.png) Change the bars to a colour you like.\n\n`fill` is one of the arguments covered by `...`. `fill` is an\n'aesthetic'. If you look for `...` in the list of arguments you will see\nit says:\n\n> Other arguments passed on to layer(). These are often aesthetics, used\n> to set an aesthetic to a fixed value, like colour = \"red\" or size = 3.\n> They may also be parameters to the paired geom/stat.\n\nWe just set the \\`fill\\` aesthetic to a fixed value.\n\nFurther down the manual, there is a section on **Aesthetics** which\nlists those understood by `geom_col()`\n\nWe can set (map) the `fill` aesthetic to a fixed colour inside\n`geom_col()` *or* map it to a variable from the dataframe inside the\n`aes()` instead. This means the colour will be different for different\nvalues in that variable.\n\n![](images/do_in_R.png) Map the `fill` aesthetic to the `coat` variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = coat_data, aes(x = coat, y = freq, fill = coat)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-14-1.png){width=4200}\n:::\n:::\n\n\nNote that we have taken `fill = \"lightblue\"` out of the `geom_col()` and\ninstead put `fill = coat` in the `aes()`.\n\n![](images/do_in_R.png) Use the manual to put the bars next to each\nother. Look for the argument that will mean there is no space between\nthe bars.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-15-1.png){width=4200}\n:::\n:::\n\n\n![](images/do_in_R.png) Use the manual to change the colour of the lines\naround each bar to black.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-16-1.png){width=4200}\n:::\n:::\n\n\n### Changing the axes\n\nWe can make changes to the axes using:\n\n-   Changes to a discrete x axis: `scale_x_discrete()`\n-   Changes to a continuous y axis: `scale_y_continuous()`\n\n`ggplot` automatically extends the axes slightly. You can turn this\nbehaviour off with the `expand` argument in `scale_x_discrete()` and\n`scale_y_continuous()`.[^1]\n\n[^1]: There are also `scale_x_continous()` and `scale_y_discrete()`\n    functions when you have those types of variable\n\n![](images/do_in_R.png) Remove the gap between the axes and the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", \n           width = 1, \n           colour = \"black\") +\n  scale_x_discrete(expand = c(0, 0)) + \n  scale_y_continuous(expand = c(0, 0)) \n```\n\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-17-1.png){width=4200}\n:::\n:::\n\n\nEach 'layer' is added to the ggplot() command with a `+`\n\n::: callout-tip\n## Top Tip\n\nMake your code easier to read by using white space and new lines\n\n-   put spaces around `=` , `->` and after `,`\n-   use a newline after every comma in a command with lots of arguments\n:::\n\n![](images/do_in_R.png) Look up `scale_x_discrete` in the manual and\nwork out how to change the axis title from \"coat\" to \"Coat colour\". Also\nchange the *y*-axis title.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-18-1.png){width=4200}\n:::\n:::\n\n\n![](images/do_in_R.png) I would prefer to see the *y*-axis extend a\nlittle beyond the data and we can change the axis \"limits\" in the\n`scale_y_continuous()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", \n           width = 1, \n           colour = \"black\") +\n  scale_x_discrete(expand = c(0, 0),\n                   name = \"Coat colour\") + \n  scale_y_continuous(expand = c(0, 0),\n                     name = \"Number of cats\",\n                     limits = c(0, 25)) \n```\n\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-19-1.png){width=4200}\n:::\n:::\n\n\n### Getting rid of the grey background\n\nThe grey grid background is useful for examining plots on a screen but\nfor a report of publication you will want a more scientific style. Every\naspect of the \"theme\" of a plot - the non-data elements such as fonts,\nbackground colours, axis line colours etc - can be controlled\nindividually[^2] but there are some handy built in themes that apply\nseveral changes at once. One of these is `theme_classic()`\n\n[^2]: [Modify components of a\n    theme](https://ggplot2.tidyverse.org/reference/theme.html)\n\n![](images/do_in_R.png) Add `theme_classic()` to the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(width = 1, \n           colour = \"black\",\n           fill = \"lightblue\") +\n  scale_x_discrete(expand = c(0, 0),\n                   name = \"Coat colour\") + \n  scale_y_continuous(expand = c(0, 0),\n                     name = \"Number of cats\",\n                     limits = c(0, 25)) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-20-1.png){width=4200}\n:::\n:::\n\n\n### Changing the order of bars\n\nThe default ordering of a categorical variable like `coat` is\nalphabetical. Often we want to change the order. For example, you might\nwant a \"Control\" on the left or the categories might have an inherent\norder (e.g., small, medium and large). We can alter (`mutate`) the\n`coat` variable using `fct_relevel()`.\n\n![](images/do_in_R.png) Make \"white\" the first category:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoat_data <- coat_data |> \n  mutate(coat = fct_relevel(coat, \"white\"))\n```\n:::\n\n\n::: callout-note\n## The pipe `|>`\n\n`|>` is called the \"pipe\". A keyboard shortcut is Control+Shift+M\n\nThe pipe puts the output of one command (one the left) as input to\nanother command (on the right). It can be read as \"and then\". You will\nmore about it next week.\n:::\n\n![](images/do_in_R.png) Now plot again.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-22-1.png){width=4200}\n:::\n:::\n\n\nIf you wanted white and then ginger you would do\n`fct_relevel(coat, c(\"white\", \"ginger\")`\n\nWe can also order the categories by the values in another variable by\nusing `reorder()` in the plot code.\n\n![](images/do_in_R.png) Reorder the categories in `coat` by the the\nvalue in `freq`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = coat_data, \n       aes(x = reorder(coat, freq, decreasing = TRUE), \n           y = freq)) +\n  geom_col(width = 1, \n           colour = \"black\",\n           fill = \"lightblue\") +\n  scale_x_discrete(expand = c(0, 0),\n                   name = \"Coat colour\") + \n  scale_y_continuous(expand = c(0, 0),\n                     name = \"Number of cats\",\n                     limits = c(0, 25)) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-23-1.png){width=4200}\n:::\n:::\n\n\nYou're finished!\n\n# ü•≥ Well Done! üéâ\n\n![Artwork by @allison_horst: \"but now its\nlike\"](images/r_first_then.png){fig-alt=\"A digital cartoon with two illustrations: the top shows the R-logo with a scary face, and a small scared little fuzzy monster holding up a white flag in surrender while under a dark storm cloud. The text above says 'at first I was like‚Ä¶'. The lower cartoon is a friendly, smiling R-logo jumping up to give a happy fuzzy monster a high-five under a smiling sun and next to colourful flowers. The text above the bottom illustration reads 'but now its like‚Ä¶'. \"\nwidth=\"800\"}\n\n[Consolidate](study_after_workshop.qmd)\n\n# The Code file\n\nThis contains all the code needed in the workshop even where it is not\nvisible on the webpage.\n\nThe `workshop.qmd` file is the file I use to compile the practical. Qmd\nstands for Quarto markdown. It allows code and ordinary text to be\ninterweaved to produce well-formatted reports including webpages. [ View\nthe source code for this workshop using the `</> Code` button at the top\nof the page.\nCoding and thinking answers are marked with `#---CODING ANSWER---` and\n`#---THINKING ANSWER---`\n\nPages made with R [@R-core], Quarto [@allaire2022], `knitr` \n[@knitr1; @knitr2; @knitr3],\n`kableExtra` [@kableExtra]\n\n# References\n",
    "supporting": [
      "workshop_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}