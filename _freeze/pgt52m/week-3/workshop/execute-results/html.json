{
  "hash": "ed7a7f4f60bb8f278cd2ed42332b587a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Workshop\"\nsubtitle: \"Types of variable, the normal distribution and summarising data\"\ntoc: true\ntoc-location: right\n---\n\n\n\n# Introduction\n\n![Artwork by @allison_horst: Continuous and\nDiscrete](images/continuous_discrete-01.png){fig-alt=\"One the left: Continuous data - measures that can have possible infinite values within its range. A cute chick labelled I am 3.1 inches tall, I weigh 34.16 grams. One the right: Discrete observations can only exist at limited values, often counts. A cute octopus labelled I have 8 legs and 4 spots\"}\n\n## Session overview\n\nIn this workshop you will learn how to import data from files in your\nworking directory and from a folder in your working directory. This will\ndevelop your understanding of working directories and paths. You will\nalso create summaries and plots for data you import. This will give you\nmore practice customising plots and using the pipe.\n\n## Philosophy\n\nWorkshops are not a test. It is expected that you often don't know how\nto start, make a lot of mistakes and need help. It is expected that you\nare familiar with independent study content before the workshop.\nHowever, you need not remember or understand every detail as the\nworkshop should build and consolidate your understanding. Tips\n\n-   don't worry about making mistakes\n-   don't let what you can not do interfere with what you can do\n-   discussing code with your neighbours will help\n-   look things up in the independent study material\n-   look things up in your own code from earlier workshops\n-   there are no stupid questions\n\n::: callout-note\n## Key\n\nThese four symbols are used at the beginning of each instruction so you\nknow where to carry out the instruction.\n\n![](images/do_on_your_computer.png) Something you need to do on your\ncomputer. It may be opening programs or documents or locating a file.\n\n![](images/do_in_R.png) Something you should do in RStudio. It will\noften be typing a command or using the menus but might also be creating\nfolders, locating or moving files.\n\n![](images/do_on_internet.png) Something you should do in your browser\non the internet. It may be searching for information, going to the VLE\nor downloading a file.\n\n![](images/answer.png) A question for you to think about and answer.\nRecord your answers in your script for future reference.\n:::\n\n# Getting started\n\n![](images/do_on_your_computer.png) Start RStudio from the Start menu.\n\n![](images/do_in_R.png) Make an RStudio project for this workshop by\nclicking on the drop-down menu on top right where it says\n`Project: (None)` and choosing New Project, then New Directory, then New\nProject. Navigate to the `data-analysis-in-r-1` folder and name the\nRStudio Project 'week-3'.\n\n![](images/do_in_R.png) Make a new script then save it with a name like\n`analysis.R` to carry out the rest of the work.\n\n![](images/do_in_R.png) Add a comment to the script:\n`# Types of variable, the normal distribution and summarising data`\n\n# Exercises\n\n## Importing data from files\n\nLast week we created data [by typing the values in to\nR](../week-2/workshop.html#creating-the-data). This is not practical\nwhen you have a lot of data. For example if you have recorded a lot of\ndata into a spreadsheet, or you are using a data file that has been\nsupplied to you by a person or a machine. Far more commonly, we import\ndata from a file into R. This requires you know two pieces of\ninformation.\n\n1.  What format the data are in\n\n    The format of the data determines what function you will use to\n    import it and the file extension often indicates format.\n\n    -   `.txt` a plain text file[^1], where the columns are often\n        separated by a space but might also be separated by a tab, a\n        backslash or forward slash, or some other character\n    -   `.csv` a plain text file where the columns are separated by\n        commas\n    -   `.xlsx` an Excel file\n\n2.  Where the file is relative to your working directory\n\n    `R` can only read in a file if you say where it is, *i.e.*, you give\n    its **relative path**.\n\n[^1]: Plain text files can be opened in notepad or other similar editor\n    and still be readable.\n\nWe will first save the four files for this workshop to our Project\nfolder (`week-3`) and read them in. Then we will then create a new\nfolder inside our Project folder called `data-raw`, move the data files\ninto it and read them in from there. This will allow you to see how the\nfile paths need to be modified when a file is not in your working\ndirectory.\n\n![](images/do_on_your_computer.png) Save these four files in to your\n`week-3` folder\n\n-   The coat colour and mass of 62 cats:\n    [cat-coats.csv](data-raw/cat-coats.csv)\n-   The relative size of over 5000 cells measure by forward scatter\n    (FSC) in flow cytometry: [cell-size.txt](data-raw/cell-size.txt)\n-   The number of sternopleural bristles on 96 female *Drosophila*:\n    [bristles.txt](data-raw/bristles.txt)\n-   The number of sternopleural bristles on 96 female *Drosophila* (with\n    technical replicates):\n    [bristles-mean.xlsx](data-raw/bristles-mean.xlsx)\n\nThe first three files can be read in with core **`tidyverse`**\n@tidyverse functions and the last can be read in with the **`readxl`**\n@readxl package.\n\n![](images/do_in_R.png) Load the two packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\n```\n:::\n\n\nWe will first read in `cat-coats.csv`. A `.csv.` extension suggests this\nis plain text file with comma separated columns. However, before we\nattempt to read it it, when should take a look at it. We can do this\nfrom RStudio\n\n![](images/do_in_R.png) Go to the Files pane (bottom right), click on\nthe `cat-coats.csv` file and choose View File[^2]\n\n[^2]: **Do not** be tempted to import data this way. Unless you are\n    careful, your data import will not be scripted or will not be\n    scripted correctly.\n\n![RStudio Files\nPane](images/rstudio-filepane-viewfile.png){fig-alt=\"Rstudio Files pane \nshowing the data files and the View File option that appears when you click \non the a particular file\"}\n\nAny plain text file will open in the top left pane (Excel files will\nlaunch Excel).\n\n![](images/answer.png) Is the file csv?\n\n<!-- #---THINKING ANSWER--- -->\n\n<!-- Yes -->\n\n![](images/answer.png) What kind of variables does the file contain?\n\n<!-- #---THINKING ANSWER--- -->\n\n<!-- coat which is (discrete) nominal and mass which is continuous-->\n\n![](images/do_in_R.png) Read in the csv file with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncats <- read_csv(\"cat-coats.csv\")\n```\n:::\n\n\nThe data from the file a read into a dataframe called `cats` and you\nwill be able to see it in the Environment.\n\n![](images/do_in_R.png) Click on each of the remaining files and choose\nView File.\n\n![](images/answer.png) In each case, say what the format is and what\ntypes of variables it contains.\n\n<!-- #---THINKING ANSWER--- -->\n\n<!-- bristles.txt is a plain text file which contains a single variable, -->\n\n<!-- numbers, which is an integer (so not continuous but might be a count) -->\n\n<!-- cell-size-txt is a plain text file which contains a single variable, -->\n\n<!-- FSC, which are integers but the value is high so it might be possible -->\n\n<!-- to treat as a count -->\n\n<!-- bristles-mean.xlxs is an excel file with two variables: fly is an integer -->\n\n<!-- from 1 to 96 and mean count seems to be continuous -->\n\nWe use the `read_table()`[^3] command to read in plain text files of\nsingle columns or where the columns are separated by spaces.\n\n[^3]: note `read_csv()` and `read_table()` are the same functions with\n    some different settings.\n\n![](images/do_in_R.png) ...so in `cell-size.txt` can be read into a\ndataframe called `cells` like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncells <- read_table(\"cell-size.txt\")\n```\n:::\n\n\n![](images/do_in_R.png) Now you try reading `bristles.txt` in to a\ndataframe called `fly_bristles`\n\n\n\nThe **`readxl`** package we loaded earlier has two useful functions for\nworking with Excel files: `excel_sheets(\"filename.xlsx\")` will list the\nsheets in an Excel workbook; `read_excel(\"filename.xlsx\")` will read in\nto top sheet or a specified sheet with a small modification\n`read_excel(\"filename.xlsx\", sheet = \"Sheet1\")`.\n\n![](images/do_in_R.png) List the the names of the sheets and read in the\nsheet with the data like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexcel_sheets(\"bristles-mean.xlsx\")\nfly_bristles_means <- read_excel(\"bristles-mean.xlsx\", sheet = \"means\")\n```\n:::\n\n\nWell done! You can now read read in from files in your working\ndirectory.\n\nTo help you understand relative file paths, we will now move the data\nfiles.\n\n![](images/do_in_R.png) First remove the dataframes you just created to\nmake it easier to see whether you can successfully read in the files\nfrom a different place:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(cat_coats, fly_bristles, cells, flies_bristles_means)\n```\n:::\n\n\n![](images/do_in_R.png) Now make a new folder called `data-raw`. You can\ndo this on the Files Pane by clicking New Folder and typing into the box\nthat appears.\n\n![](images/do_in_R.png) Check the boxes next to the file names and\nchoose More \\| Move... and select the `data-raw` folder.\n\n![RStudio Files\nPane](images/rstudio-filepane-move-files.png){fig-alt=\"Rstudio Files pane showing the boxes nest to the data files check and the pop-up menu with the Move... option\"}\nThe files will move. To import data from files in the `data-raw` folder,\nyou need to give the relative path to the file from the working\ndirectory. The working directory is the Project folder, `week-3` so the\nrelative path is `data-raw/cat-coats.csv`\n\n![](images/do_in_R.png) Import the `cat-coats.csv` data like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncats <- read_csv(\"data-raw/cat-coats.csv\")\n```\n:::\n\n\n![](images/do_in_R.png) Now you do the other files.\n\n\n\nFrom this point forward in the course, we will always create a\n`data-raw` folder each time we make a new Project.\n\n::: callout-tip\n## Organising your work\n\nEach time you start a new piece of work, make a new Project with a `data-raw`\nfolder inside. Always using the same organisation will make it easier\nto find your files and to read them in.\n:::\n\nThese are the most common forms of data file you will encounter at\nfirst. However, data can certainly come to you in other formats\nparticularly when they have come from particular software. Usually,\nthere is an `R` package specially for that format.\n\nIn the rest of the workshop we will take each dataset in turn and create\nsummaries and plots appropriate for the data types. Data is summarised\nusing the `group_by()` and `summarise()` functions\n\n## Summarising discrete data: Cat coat\n\nThe most appropriate way to summarise nominal data like the colour of\ncat coats is to tabulate the number of cats with each colour.\n\n![](images/do_in_R.png) Summarise the `cats` dataframe by counting the\nnumber of cats in each category\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncats |> \n  group_by(coat) |> \n  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n# Groups:   coat [6]\n  coat              n\n  <chr>         <int>\n1 black            23\n2 calico            1\n3 ginger           10\n4 tabby             8\n5 tortoiseshell     5\n6 white            15\n```\n\n\n:::\n:::\n\n\n`|>` is the pipe and can be produced with Ctrl+Shift+M\n\nThis sort of data might be represented with a barchart. You have two\noptions for producing that barchart:\n\n1.  plot the summary table using `geom_col()`\n\n2.  plot the raw data using `geom_bar()`\n\nWe did the first of these [last\nweek](../week-2/workshop.html#plotting-the-data-with-ggplot). The\n`geom_col()` function uses the numbers in a second column to determine\nhow high the bars are. However, the `geom_bar()` function will do the\ntabulating for you.\n\n![](images/do_in_R.png) Plot the coat data using `geom_bar`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cats, aes(x = coat)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-11-1.png){width=4200}\n:::\n:::\n\n\nThe gaps that `R` put automatically between the bars reflects that the\ncoat colours are discrete categories.\n\n## Summarising Counts: Bristles\n\nCounts are discrete and can be thought of a categories with an order\n(ordinal).\n\n![](images/do_in_R.png) Summarise the `fly_bristles` dataframe by\ncounting the number of flies in each category of bristle number\n\n\n\nSince counts are numbers, we might also want to calculate some summary\nstatistics such as the median and interquartile range.\n\n![](images/do_in_R.png) Summarise the `fly_bristles` dataframe by\ncalculate the median and interquartile range\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfly_bristles |> \n  summarise(median(number),\n            IQR(number))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  `median(number)` `IQR(number)`\n             <dbl>         <dbl>\n1                6             4\n```\n\n\n:::\n:::\n\n\nAs the interquartile is 4 and the median is\n6 then 25% flies have\n4 bristles or\nfewer and 25% have\n8 or more.\n\nThe distribution of counts[^4] is not symmetrical for lower counts so\nthe mean is not usually a good way to summarise count data.\n\n[^4]: Count data are usually \"Poisson\" distributed.\n\n![](images/do_in_R.png) If you want to save the table you created and\ngive the columns better names you can make two adjustments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfly_bristles_summary <- fly_bristles |> \n  summarise(med = median(number),\n            interquartile = IQR(number))\n```\n:::\n\n\n-   we have saved the output to an object `fly_bristles_summary` using \n    assignment `<-`. This means you will not see output from the command.\n\n-   we have given the columns better names `med` and `interquartile` using\n    the `=` operator.\n\n\n![](images/do_in_R.png) Plot the bristles data using `geom_bar`:\n\n\n\nIf counts have a a high mean and big range, like number of hairs on a\nperson's head, then you can often treat them as continuous. This means\nyou can use statistics like the mean and standard deviation to summarise\nthem, histograms to plot them and use some standard statistical tests on\nthem.\n\n## Summarising continuous data\n\n### Cat mass\n\nThe variable `mass` in the `cats` dataframe is continuous. Very many\ncontinuous variables have a normal distribution. e normal distribution\nis also known as the bell-shaped curve. If we had the mass of all the\ncats in the world, we would find many cats were near the mean and fewer\nwould be away from the mean, either much lighter or much heavier. In\nfact 68% would be within one standard deviation of the mean and about\n96% would be within two standard deviations.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-16-1.png){width=4200}\n:::\n:::\n\n\n![](images/do_in_R.png) We can find the mean mass with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncats |> \n  summarise(mean = mean(mass))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   mean\n  <dbl>\n1  4.51\n```\n\n\n:::\n:::\n\n\nWe can add any sort of summary by placing it inside the the summarise\nparentheses. Each one is separated by a comma. We did this to find the\nmedian and the interquatrile range for fly bristles.\n\n![](images/do_in_R.png) For example, another way to calculate the number\nof values is to use the `length()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncats |> \n  summarise(mean = mean(mass),\n            n = length(mass))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n   mean     n\n  <dbl> <int>\n1  4.51    62\n```\n\n\n:::\n:::\n\n\n![](images/do_in_R.png) Adapt the code to calculate the mean, the sample\nsize *and* the standard deviation (`sd()`)\n\n\n\nA single continuous variable can be plotted using a histogram to show\nthe shape of the distribution.\n\n![](images/do_in_R.png) Plots a histogram of cats mass:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cats, aes(x = mass)) +\n  geom_histogram(bins = 15, colour = \"black\") \n```\n\n::: {.cell-output-display}\n![](workshop_files/figure-html/unnamed-chunk-20-1.png){width=4200}\n:::\n:::\n\n\nNotice that there are no gaps between the bars which reflects that\n`mass` is continuous. `bins` determines how many groups the variable is\ndivided up into (i.e., the number of bars) and `colour` sets the colour\nfor the outline of the bars. A sample of 62 is a relatively small number\nof values for plotting a distribution and the number of bins used\ndetermines how smooth or normally distributed the values look.\n\n![](images/do_in_R.png) Experiment with the number of bins. Does the\nnumber of bins affect how you view the distribution.\n\nNext week we will practice summarise and plotting data files with\nseveral variables but just to give you a taste, we will find summary\nstatistics about mass for each of the coat types.\n\n\n![](images/do_in_R.png) The `group_by()` function is used before the\nsummarise() to do calculations for each of the coats:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncats |> \n  group_by(coat) |> \n  summarise(mean = mean(mass),\n                  standard_dev = sd(mass))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  coat           mean standard_dev\n  <chr>         <dbl>        <dbl>\n1 black          4.63        1.33 \n2 calico         2.19       NA    \n3 ginger         4.46        1.12 \n4 tabby          4.86        0.444\n5 tortoiseshell  4.50        0.929\n6 white          4.34        1.34 \n```\n\n\n:::\n:::\n\n\nYou can read this as:\n\n> take cats *and then* group by coat *and then* summarise by finding the\n> mean of mass and the standard deviation of mass\n\n![](images/answer.png) Why do we get an `NA` for the standard deviation\nof the calico cats?\n\n<!-- #---THINKING ANSWER--- -->\n\n<!-- Because there is only one calico cat. The mean of a single value is that  -->\n\n<!-- value but there can be no average by which the values deviation from the mean. -->\n\n### Cells\n\n![](images/do_in_R.png) Summarise the `cells` dataframe by calculating\nthe mean, median, sample size and standard deviation of `FSC`.\n\n\n\n![](images/do_in_R.png) Add a column for the standard error which is\ngiven by $\\frac{s.d.}{\\sqrt{n}}$\n\n\n\n### Means of counts\n\nMany things are quite difficult to measure or count and in these cases\nwe often do **technical replicates**. A technical replicate allows us\nthe measure the exact same thing to check how variable the measurement\nprocess is. For example, *Drosophila* are small and counting their\nsternopleural bristles is tricky. In addition, where a bristle is short\n(young) or broken scientists might vary in whether they count it. Or\npeople or machines might vary in measuring the concentration of the same\nsolution.\n\nWhen we do technical replicates we calculate their mean and use that as\nthe measure. This is what is in our `fly_bristles_means` dataframe - the\nbristles of each of the 96 flies was counted by 5 people and the data\nare those means. These has an impact on how we plot and summarise the\ndataset because the distribution of mean counts is continuous! We can\nuse means, standard deviations and histograms. This will be an exercise\nin [Consolidate](study_after_workshop.qmd).\n\n## Look after future you!\n\nFuture you is going to summarise and plot data in other \nmodules. You can make this much easier by documenting what you have\ndone now. At the moment all of your code from this workshop is in a\nsingle file, probably called `import-summarise-plot.R`. I recommend \nmaking a new script for each of nominal, continuous and count data and \ncopying the code which imports, summarises and plots it. This will make \nit easier for future you to find the code you need. Here is an example:\n[nominal_data.R](assets/nominal_data.R). You may wish to comment your\nversion more.\n\nYou're finished!\n\n# 🥳 Well Done! 🎉\n\n![Artwork by @allison_horst: Not\nnormal](images/not_normal.png){fig-alt=\"two distributions as characters. One is normal (bell-shaped) the other is not\"}\n\n# Independent study following the workshop\n\n[Consolidate](study_after_workshop.qmd)\n\n# The Code file\n\nThis contains all the code needed in the workshop even where it is not\nvisible on the webpage.\n\nThe `workshop.qmd` file is the file I use to compile the practical. Qmd\nstands for Quarto markdown. It allows code and ordinary text to be\ninterweaved to produce well-formatted reports including webpages.  View\nthe source code for this workshop using the `</> Code` button at the top\nof the page.\nCoding and thinking answers are marked with `#---CODING ANSWER---` and\n`#---THINKING ANSWER---`\n\nPages made with R [@R-core], Quarto [@allaire2022], `knitr` \n[@knitr1; @knitr2; @knitr3],\n`kableExtra` [@kableExtra]\n\n# References\n",
    "supporting": [
      "workshop_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}