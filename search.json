[
  {
    "objectID": "r4babs1/r4babs1.html",
    "href": "r4babs1/r4babs1.html",
    "title": "Data Analysis in R for BABS 1",
    "section": "",
    "text": "first of 4 babs modules. four weeks of work. fundamental computing concepts data types, types of variable, role of variables ideas about data organisation using rstudio importing summarising and plotting variables\n\n\nThe BABS1 Module Learning outcomes that relate to the Data Analysis in R content are:\n\nMethodically record scientific investigations with lab books, organise data and use R to import, summarise and plot simple data sets.\nExplain the key features of effective written media for dissemination of scientific information and be able to communicate experimental results through a scientific poster."
  },
  {
    "objectID": "r4babs1/r4babs1.html#module-learning-objectives",
    "href": "r4babs1/r4babs1.html#module-learning-objectives",
    "title": "Data Analysis in R for BABS 1",
    "section": "",
    "text": "The BABS1 Module Learning outcomes that relate to the Data Analysis in R content are:\n\nMethodically record scientific investigations with lab books, organise data and use R to import, summarise and plot simple data sets.\nExplain the key features of effective written media for dissemination of scientific information and be able to communicate experimental results through a scientific poster."
  },
  {
    "objectID": "r4babs1/week-8/study_after_workshop.html",
    "href": "r4babs1/week-8/study_after_workshop.html",
    "title": "Week 8: Types of variable, the normal distribution and summarising data",
    "section": "",
    "text": "Set up\nIf you have just opened RStudio you will want to load the packages and import the data.\n\nlibrary(tidyverse)\nlibrary(readxl)\n\n\nfly_bristles_means &lt;- read_excel(\"data-raw/bristles-mean.xlsx\")\ncats &lt;- read_csv(\"data-raw/cat-coats.csv\")\n\n\n\nExercises\n\n💻 Summarise the fly_bristles_means dataframe by calculating the mean, median, sample size, standard deviation and standard error of the mean_count variable.\n\n\n\nCode\nfly_bristles_means_summary &lt;- fly_bristles_means |&gt; \n  summarise(mean = mean(mean_count),\n            median = median(mean_count),\n            n = length(mean_count),\n            standard_dev = sd(mean_count),\n            standard_error = standard_dev / sqrt(n))\n\n\n\n💻 Create an appropriate plot to show the distribution of mean_count in fly_bristles_means\n\n\n\nCode\nggplot(fly_bristles_means, aes(x = mean_count)) +\n  geom_histogram(bins = 10)\n\n\n\n💻 Can you format the plot 2. by removing the grey background, giving the bars a black outline and the fill colour of your choice and improving the axis format and labelling? You may want to refer to last week’s workshop.\n\n\n\nCode\nggplot(fly_bristles_means, aes(x = mean_count)) +\n  geom_histogram(bins = 10, \n                 colour = \"black\",\n                 fill = \"skyblue\") +\n  scale_x_continuous(name = \"Number of bristles\",\n                     expand = c(0, 0)) +\n  scale_y_continuous(name = \"Frequency\",\n                     expand = c(0, 0),\n                     limits = c(0, 35)) +\n  theme_classic()\n\n\n\n💻 Amend this code to change the order of the bars by the average mass of each coat colour? Changing the order of bars was covered last week. You may also want to practice formatting the graph nicely.\n\n\nggplot(cats, aes(x = coat, y = mass)) +\n  geom_boxplot()\n\n\n\n\n\n\nCode\nggplot(cats, \n       aes(x = reorder(coat, mass), y = mass)) +\n  geom_boxplot(fill = \"darkcyan\") +\n  scale_x_discrete(name = \"Coat colour\") +\n  scale_y_continuous(name = \"Mass (kg)\", \n                     expand = c(0, 0),\n                     limits = c(0, 8)) +\n  theme_classic()\n\n\n\n📖 Read Understanding the pipe |&gt;"
  },
  {
    "objectID": "r4babs1/week-8/study_before_workshop.html",
    "href": "r4babs1/week-8/study_before_workshop.html",
    "title": "Week 8: Types of variable, the normal distribution and summarising data",
    "section": "",
    "text": "Prepare\n\n📖 Read Ideas about data"
  },
  {
    "objectID": "r4babs1/week-8/workshop.html",
    "href": "r4babs1/week-8/workshop.html",
    "title": "Week 8: Types of variable, the normal distribution and summarising data",
    "section": "",
    "text": "Continuous and Discrete\n\n\n\n\nIn this workshop you will learn how to import data from files and create summaries and plots for it. You will also get more practice with working directories, formatting figures and the pipe.\n\n\n\nWorkshops are not a test. It is expected that you often don’t know how to start, make a lot of mistakes and need help. It is expected that you are familiar with independent study content before the workshop. However, you need not remember or understand every detail as the workshop should build and consolidate your understanding. Tips\n\ndon’t worry about making mistakes\ndon’t let what you can not do interfere with what you can do\ndiscussing code with your neighbours will help\nlook things up in the independent study material\nlook things up in your own code from earlier workshops\nthere are no stupid questions\n\n\n\n\n\n\n\nKey\n\n\n\nThese four symbols are used at the beginning of each instruction so you know where to carry out the instruction.\n Something you need to do on your computer. It may be opening programs or documents or locating a file.\n Something you should do in RStudio. It will often be typing a command or using the menus but might also be creating folders, locating or moving files.\n Something you should do in your browser on the internet. It may be searching for information, going to the VLE or downloading a file.\n A question for you to think about and answer. Record your answers in your script for future reference."
  },
  {
    "objectID": "r4babs1/week-8/workshop.html#session-overview",
    "href": "r4babs1/week-8/workshop.html#session-overview",
    "title": "Week 8: Types of variable, the normal distribution and summarising data",
    "section": "",
    "text": "In this workshop you will learn how to import data from files and create summaries and plots for it. You will also get more practice with working directories, formatting figures and the pipe."
  },
  {
    "objectID": "r4babs1/week-8/workshop.html#philosophy",
    "href": "r4babs1/week-8/workshop.html#philosophy",
    "title": "Week 8: Types of variable, the normal distribution and summarising data",
    "section": "",
    "text": "Workshops are not a test. It is expected that you often don’t know how to start, make a lot of mistakes and need help. It is expected that you are familiar with independent study content before the workshop. However, you need not remember or understand every detail as the workshop should build and consolidate your understanding. Tips\n\ndon’t worry about making mistakes\ndon’t let what you can not do interfere with what you can do\ndiscussing code with your neighbours will help\nlook things up in the independent study material\nlook things up in your own code from earlier workshops\nthere are no stupid questions\n\n\n\n\n\n\n\nKey\n\n\n\nThese four symbols are used at the beginning of each instruction so you know where to carry out the instruction.\n Something you need to do on your computer. It may be opening programs or documents or locating a file.\n Something you should do in RStudio. It will often be typing a command or using the menus but might also be creating folders, locating or moving files.\n Something you should do in your browser on the internet. It may be searching for information, going to the VLE or downloading a file.\n A question for you to think about and answer. Record your answers in your script for future reference."
  },
  {
    "objectID": "r4babs1/week-8/workshop.html#importing-data-from-files",
    "href": "r4babs1/week-8/workshop.html#importing-data-from-files",
    "title": "Week 8: Types of variable, the normal distribution and summarising data",
    "section": "Importing data from files",
    "text": "Importing data from files\nLast week we created data by typing the values in to R. This is not practical when you have added a lot of data to a spreadsheet, or you are using data file that has been supplied to you by a person or a machine. Far more commonly, we import data from a file into R. This requires you know two pieces of information.\n\nWhat format the data are in\nThe format of the data determines what function you will use to import it and the file extension often indicates format.\n\n.txt a plain text file1, where the columns are often separated by a space but might also be separated by a tab, a backslash or forward slash, or some other character\n.csv a plain text file where the columns are separated by commas\n.xlsx an Excel file\n\nWhere the file is relative to your working directory\nR can only read in a file if you say where it is, i.e., you give its relative path. If you follow the advice in this course, your data will be in a folder, data-raw which is inside your Project folder (and working directory).\n\nWe will save the four files for this workshop to our Project folder (week-8) and read them in. We will then create a new folder inside our Project folder called data-raw and move the data files to there before modifying the file paths as required. This is demonstrate how the relative path to the file will change after we move it.\n Save these four files in to your week-8 folder\n\nThe coat colour and mass of 62 cats: cat-coats.csv\nThe relative size of over 5000 cells measure by forward scatter (FSC) in flow cytometry: cell-size.txt\nThe number of sternopleural bristles on 96 female Drosophila: bristles.txt\nThe number of sternopleural bristles on 96 female Drosophila (with technical replicates): bristles-mean.xlsx\n\nThe first three files can be read in with core **tidyerse** functions and the last can be read in with the **readxl** package.\n Load the two packages\n\nlibrary(tidyverse)\nlibrary(readxl)\n\nWe will first read in cat-coats.csv. A .csv. extension suggests this is plain text file with comma separated columns. However, before we attempt to read it it, when should take a look at it. We can do this from RStudio\n Go to the Files pane (bottom right), click on the cat-coats.csv file and choose View File2\n\n\n\nRStudio Files Pane\n\n\nAny plain text file will open in the top left pane (Excel files will launch Excel).\n Is the file csv?\n\n\n What kind of variables does the file contain?\n\n\n Read in the csv file with:\n\ncats &lt;- read_csv(\"cat-coats.csv\")\n\nThe data from the file a read into a dataframe called cats and you will be able to see it in the Environment.\n Click on each of the remaining files and choose View File.\n In each case, say what the format is and what types of variables it contains.\n\n\n\n\n\n\n\n\nWe use the read_table()3 command to read in plain text files of single columns or where the columns are separated by spaces…\n …so in cell-size.txt can be read into a dataframe called cells like this:\n\ncells &lt;- read_table(\"cell-size.txt\")\n\n Now you try reading bristles.txt in to a dataframe called fly_bristles\nThe **readxl** package we loaded earlier has two useful functions for working with Excel files: excel_sheets(\"filename.xlsx\") will list the sheets in an Excel workbook; read_excel(\"filename.xlsx\") will read in to top sheet or a specified sheet with a small modification read_excel(\"filename.xlsx\", sheet = \"Sheet1\").\n List the the names of the sheets and read in the sheet with the data like this:\n\nexcel_sheets(\"bristles-mean.xlsx\")\nfly_bristles_means &lt;- read_excel(\"bristles-mean.xlsx\", sheet = \"means\")\n\nWell done! You can now read read in from files in your working directory.\nTo help you understand relative file paths, we will now move the data files.\n First remove the dataframes you just created to make it easier to see whether you can successfully read in the files from a different place:\n\nrm(cat_coats, fly_bristles, cells, flies_bristles_means)\n\n Now make a new folder called data-raw. You can do this on the Files Pane by clicking New Folder and typing into the box that appears.\n Check the boxes next to the file names and choose More | Move… and select the data-raw folder.\n The files will move. To import data from files in the data-raw folder, you need to give the relative path to the file from the working directory. The working directory is the Project folder, week-8 so the relative path is data-raw/cat-coats.csv\n Import the cat-coats.csv data like this:\n\ncats &lt;- read_csv(\"data-raw/cat-coats.csv\")\n\n Now you do the other files.\nFrom this point forward in the course, we will always create a data-raw folder each time we make a new Project.\nThese are the most common forms of data file you will encounter at first. However, data can certainly come to you in other formats particularly when they have come from particular software. Usually, there is an R package specially for that format.\nIn the rest of the workshop we will take each dataset in turn and create summaries and plots appropriate for the data types. Data is summarised using the group_by() and summarise() functions"
  },
  {
    "objectID": "r4babs1/week-8/workshop.html#summarising-discrete-data-cat-coat",
    "href": "r4babs1/week-8/workshop.html#summarising-discrete-data-cat-coat",
    "title": "Week 8: Types of variable, the normal distribution and summarising data",
    "section": "Summarising discrete data: Cat coat",
    "text": "Summarising discrete data: Cat coat\nThe most appropriate way to summarise nominal data like the colour of cat coats is to tabulate the number of cats with each colour.\n Summarise the cats dataframe by counting the number of cats in each category\n\ncats |&gt; \n  group_by(coat) |&gt; \n  count()\n\n# A tibble: 6 × 2\n# Groups:   coat [6]\n  coat              n\n  &lt;chr&gt;         &lt;int&gt;\n1 black            23\n2 calico            1\n3 ginger           10\n4 tabby             8\n5 tortoiseshell     5\n6 white            15\n\n\n|&gt; is the pipe and can be produced with Ctrl+Shift+M\nThis sort of data might be represented with a barchart. You have two options for producing that barchart:\n\nplot the summary table using geom_col()\nplot the raw data using geom_bar()\n\nWe did the first of these last week. The geom_col() function uses the numbers in a second column to determine how high the bars are. However, the geom_bar() function will do the tabulating for you.\n Plot the coat data using geom_bar:\n\nggplot(cats, aes(x = coat)) +\n  geom_bar()\n\n\n\n\nThe gaps that R put automatically between the bars reflects that the coat colours are discrete categories."
  },
  {
    "objectID": "r4babs1/week-8/workshop.html#summarising-counts-bristles",
    "href": "r4babs1/week-8/workshop.html#summarising-counts-bristles",
    "title": "Week 8: Types of variable, the normal distribution and summarising data",
    "section": "Summarising Counts: Bristles",
    "text": "Summarising Counts: Bristles\nCounts are discrete and can be thought of a categories with an order (ordinal).\n Summarise the fly_bristles dataframe by counting the number of flies in each category of bristle number\nSince counts are numbers, we might also want to calculate some summary statistics such as the median and interquartile range.\n Summarise the fly_bristles dataframe by calculate the median and interquartile range\n\nfly_bristles |&gt; \n  summarise(median(number),\n            IQR(number))\n\n# A tibble: 1 × 2\n  `median(number)` `IQR(number)`\n             &lt;dbl&gt;         &lt;dbl&gt;\n1                6             4\n\n\nAs the interquartile is 4 and the median is 6 then 25% flies have 4 bristles or fewer and 25% have 8 or more.\nThe distribution of counts[^4] is not symmetrical for lower counts so the mean is not usually a good way to summarise count data. [^4]: Count data are usually “Poisson” distributed.\n If you want to save the table you created and give the columns better names you can make two adjustments:\n\nfly_bristles_summary &lt;- fly_bristles |&gt; \n  summarise(med = median(number),\n            interquartile = IQR(number))\n\n Plot the bristles data using geom_bar:\nIf counts have a a high mean and big range, like number of hairs on a person’s head, then you can often treat them as continuous. This means you can use statistics like the mean and standard deviation to summarise them, histograms to plot them and use some standard statistical tests on them."
  },
  {
    "objectID": "r4babs1/week-8/workshop.html#summarising-continuous-data",
    "href": "r4babs1/week-8/workshop.html#summarising-continuous-data",
    "title": "Week 8: Types of variable, the normal distribution and summarising data",
    "section": "Summarising continuous data",
    "text": "Summarising continuous data\n\nCat mass\nThe variable mass in the cats dataframe is continuous. Very many continuous variables have a normal distribution. e normal distribution is also known as the bell-shaped curve. If we had the mass of all the cats in the world, we would find many cats were near the mean and fewer would be away from the mean, either much lighter or much heavier. In fact 68% would be within one standard deviation of the mean and about 96% would be within two standard deviations.\n\n\n\n\n\n We can find the mean mass with:\n\ncats |&gt; \n  summarise(mean = mean(mass))\n\n# A tibble: 1 × 1\n   mean\n  &lt;dbl&gt;\n1  4.51\n\n\nWe can add any sort of summary by placing it inside the the summarise parentheses. Each one is separated by a comma. We did this to find the median and the interquatrile range for fly bristles.\n For example, another way to calculate the number of values is to use the length() function:\n\ncats |&gt; \n  summarise(mean = mean(mass),\n            n = length(mass))\n\n# A tibble: 1 × 2\n   mean     n\n  &lt;dbl&gt; &lt;int&gt;\n1  4.51    62\n\n\n Adapt the code to calculate the mean, the sample size and the standard deviation (sd())\nA single continuous variable can be plotted using a histogram to show the shape of the distribution.\n Plots a histogram of cats mass:\n\nggplot(cats, aes(x = mass)) +\n  geom_histogram(bins = 10, colour = \"black\")\n\n\n\n\nNotice that there are no gaps between the bars which reflects that mass is continuous. bins determines how many groups the variable is divided up into (i.e., the number of bars) and colour sets the colour for the outline of the bars. A sample of 62 is a relatively small number of values for plotting a distribution and the number of bins used determines how smooth or normally distributed the values look.\n Experiment with the number of bins. Does the number of bins affect how you view the distribution.\nNext week we will practice summarise and plotting data files with several variables but just to give you a taste, we will find summary statistics about mass for each of the coat types.  The group_by() function is used before the summarise() to do calculations for each of the coats:\n\ncats |&gt; \n  group_by(coat) |&gt; \n  summarise(mean = mean(mass),\n                  standard_dev = sd(mass))\n\n# A tibble: 6 × 3\n  coat           mean standard_dev\n  &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n1 black          4.63        1.33 \n2 calico         2.19       NA    \n3 ginger         4.46        1.12 \n4 tabby          4.86        0.444\n5 tortoiseshell  4.50        0.929\n6 white          4.34        1.34 \n\n\nYou can read this as:\n\ntake cats and then group by coat and then summarise by finding the mean of mass and the standard deviation of mass\n\n Why do we get an NA for the standard deviation of the calico cats?\n\n\n\n\n\nCells\n Summarise the cells dataframe by calculating the mean, median, sample size and standard deviation of FSC.\n Add a column for the standard error which is given by \\(\\frac{s.d.}{\\sqrt{n}}\\)\n\n\nMeans of counts\nMany things are quite difficult to measure or count and in these cases we often do technical replicates. A technical replicate allows us the measure the exact same thing to check how variable the measurement process is. For example, Drosophila are small and counting their sternopleural bristles is tricky. In addition, where a bristle is short (young) or broken scientists might vary in whether they count it. Or people or machines might vary in measuring the concentration of the same solution.\nWhen we do technical replicates we calculate their mean and use that as the measure. This is what is in our fly_bristles_means dataframe - the bristles of each of the 96 flies was counted by 5 people and the data are those means. These has an impact on how we plot and summarise the dataset because the distribution of mean counts is continuous! We can use means, standard deviations and histograms. This will be an exercise in Consolidate."
  },
  {
    "objectID": "r4babs1/week-8/workshop.html#look-after-future-you",
    "href": "r4babs1/week-8/workshop.html#look-after-future-you",
    "title": "Week 8: Types of variable, the normal distribution and summarising data",
    "section": "Look after future you!",
    "text": "Look after future you!\nFuture you is going to summarise and plot data from the “River practicals”. You can make this much easier by documenting what you have done now. At the moment all of your code from this workshop is in a single file, probably called analysis.R. I recommend making a new script for each of nominal, continuous and count data and copying the code which imports, summarises and plots it. This will make it easier for future you to find the code you need. Here is an example: nominal_data.R. You may wish to comment your version much more.\nYou’re finished!"
  },
  {
    "objectID": "r4babs1/week-8/workshop.html#footnotes",
    "href": "r4babs1/week-8/workshop.html#footnotes",
    "title": "Week 8: Types of variable, the normal distribution and summarising data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPlain text files can be opened in notepad or other similar editor and still be readable.↩︎\nDon’t be tempted to import data this way. Unless you are careful, your data import will not be scripted or will not be scripted correctly.↩︎\nnote read_csv() and read_table() are the same functions with some different settings.↩︎"
  },
  {
    "objectID": "r4babs1/week-8/overview.html",
    "href": "r4babs1/week-8/overview.html",
    "title": "Week 8: Types of variable, the normal distribution and summarising data",
    "section": "",
    "text": "The type of values our data can take is important in how we analyse and visualise it. This week you will learn the difference between continuous and discrete values and how we summarise and visualise them. You will also learn about the “normal distribution” which is the most important continuous distribution.\n\nLearning objectives\nThe successful student will be able to:\n\ndistinguish between continuous, discrete, nominal and ordinal variable\nread in data in to RStudio from a plain text file and Excel files\nsummarise and plot variables appropriately for the data type\n\n\n\nInstructions\n\nPrepare\n\n📖 Read: Ideas about data\n\nWorkshop\n\n💻 Importing data\n💻 Summarising discrete data\n💻 Summarising count data\n💻 Summarising continuous data\n\nConsolidate\n\n💻 Summarise some data\n💻 Plot some data\n💻 Format a plot (1)\n💻 Format a plot (2)\n📖 Read Understanding the pipe |&gt;"
  },
  {
    "objectID": "r4babs1/week-6/study_after_workshop.html",
    "href": "r4babs1/week-6/study_after_workshop.html",
    "title": "Week 6: Understanding file systems",
    "section": "",
    "text": "add learnr quiz about file systems"
  },
  {
    "objectID": "r4babs1/week-6/study_before_workshop.html",
    "href": "r4babs1/week-6/study_before_workshop.html",
    "title": "Week 6: Understanding file systems",
    "section": "",
    "text": "Prepare\n\nWatch an Introduction to Data Analysis in R for BABS 1 - 4\nRead What they forgot to teach you about computers in Computational Analysis for Bioscientists\nRead What are R and Rstudio?"
  },
  {
    "objectID": "r4babs1/week-6/workshop.html",
    "href": "r4babs1/week-6/workshop.html",
    "title": "Week 6: Understanding file systems",
    "section": "",
    "text": "There is no formal workshop this week but yu might want to install R and RStudio on your own machine. This is optional because University computers already have R and RStudio installed.\nInstall R and RStudio.\nNote you need a computer - not a tablet."
  },
  {
    "objectID": "r4babs1/week-6/overview.html",
    "href": "r4babs1/week-6/overview.html",
    "title": "Week 6: Understanding file systems",
    "section": "",
    "text": "This week you will carry out some independent study to ensure you have some understanding of computer file systems. We will introduce you to the concepts of paths and working directories.\n\n\n\nAllison Horst cartoon “code gets the blame”\n\n\n\nLearning objectives\nThe parentheses after each learning objective indicate where the content covers that objective.\nThe successful student will be able to:\n\nFile systems\nfiles and directories\nfile names, file extensions, associations with programs\nusing a file explorer\nsaving files\nfile paths\nusing google\n\n\n\nInstructions\n\nPrepare\n\nWatch an Introduction to Data Analysis in R for BABS 1 - 4\nRead What they forgot to teach you about computers\nRead What are R and Rstudio?\n\nWorkshop\n\nOptional: Install R and RStudio\n\nConsolidate\n\nTesting your understanding of file system"
  },
  {
    "objectID": "r4babs1/week-9/study_after_workshop.html",
    "href": "r4babs1/week-9/study_after_workshop.html",
    "title": "Week 9: Summarising data in with several variables and the role of variables in analysis",
    "section": "",
    "text": "Set up\nIf you have just opened RStudio you will want to load the packages and import the data.\n\nlibrary(tidyverse)\nlibrary(readxl)\n\n\n💻 Summarise and plot the pigeons dataframe appropriately.\n\n\n\nCode\n# import\npigeons &lt;- read_table(\"data-raw/pigeon.txt\")\n\n# reformat to tidy\npigeons &lt;- pivot_longer(data = pigeons, \n                        cols = everything(), \n                        names_to = \"population\", \n                        values_to = \"distance\")\n\n# sumnmarise\npigeons_summary &lt;- pigeons %&gt;%\n  group_by(population) %&gt;%\n  summarise(mean = mean(distance),\n            std = sd(distance),\n            n = length(distance),\n            se = std/sqrt(n))\n# plot\nggplot() +\n  geom_point(data = pigeons, aes(x = population, y = distance),\n             position = position_jitter(width = 0.1, height = 0),\n             colour = \"gray50\") +\n  geom_errorbar(data = pigeons_summary, \n                aes(x = population, ymin = mean - se, ymax = mean + se),\n                width = 0.3) +\n  geom_errorbar(data = pigeons_summary, \n                aes(x = population, ymin = mean, ymax = mean),\n                width = 0.2) +\n  scale_y_continuous(name = \"Interorbital distance (mm)\", \n                     limits = c(0, 14), \n                     expand = c(0, 0)) +\n  scale_x_discrete(name = \"Population\") +\n  theme_classic()\n\n\n\n\n\n\n💻 The data in x are a blood data contain x variable. Create a complete RStudio Project for an analysis of these data. You will need to:\n\nMake a new project,\nMake folders for data and for figures\nImport the data\nSummarise and plot variables of your choice. It doesn’t matter what you chose - the goal is the practice the project workflow and selecting appropriate plotting and summarising methods for particular data sets."
  },
  {
    "objectID": "r4babs1/week-9/study_before_workshop.html",
    "href": "r4babs1/week-9/study_before_workshop.html",
    "title": "Week 9: Summarising data in with several variables and the role of variables in analysis",
    "section": "",
    "text": "Prepare\n\n📖 Read Working with data in RStudio"
  },
  {
    "objectID": "r4babs1/week-9/workshop.html",
    "href": "r4babs1/week-9/workshop.html",
    "title": "Week 9: Summarising data in with several variables and the role of variables in analysis",
    "section": "",
    "text": "Data data Artwork from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst\n\n\n\n\nIn this workshop you will learn to summarise and plot datasets with more than one variable. You will also get more practice with working directories, importing data, formatting figures and the pipe. At the end of the workshop you will learn a method for laying out text, figures and figure legends in documents.\n\n\n\nWorkshops are not a test. It is expected that you often don’t know how to start, make a lot of mistakes and need help. It is expected that you are familiar with independent study content before the workshop. However, you need not remember or understand every detail as the workshop should build and consolidate your understanding. Tips\n\ndon’t worry about making mistakes\ndon’t let what you can not do interfere with what you can do\ndiscussing code with your neighbours will help\nlook things up in the independent study material\nlook things up in your own code from earlier workshops\nthere are no stupid questions\n\n\n\n\n\n\n\nKey\n\n\n\nThese four symbols are used at the beginning of each instruction so you know where to carry out the instruction.\n Something you need to do on your computer. It may be opening programs or documents or locating a file.\n Something you should do in RStudio. It will often be typing a command or using the menus but might also be creating folders, locating or moving files.\n Something you should do in your browser on the internet. It may be searching for information, going to the VLE or downloading a file.\n A question for you to think about and answer. Record your answers in your script for future reference."
  },
  {
    "objectID": "r4babs1/week-9/workshop.html#session-overview",
    "href": "r4babs1/week-9/workshop.html#session-overview",
    "title": "Week 9: Summarising data in with several variables and the role of variables in analysis",
    "section": "",
    "text": "In this workshop you will learn to summarise and plot datasets with more than one variable. You will also get more practice with working directories, importing data, formatting figures and the pipe. At the end of the workshop you will learn a method for laying out text, figures and figure legends in documents."
  },
  {
    "objectID": "r4babs1/week-9/workshop.html#philosophy",
    "href": "r4babs1/week-9/workshop.html#philosophy",
    "title": "Week 9: Summarising data in with several variables and the role of variables in analysis",
    "section": "",
    "text": "Workshops are not a test. It is expected that you often don’t know how to start, make a lot of mistakes and need help. It is expected that you are familiar with independent study content before the workshop. However, you need not remember or understand every detail as the workshop should build and consolidate your understanding. Tips\n\ndon’t worry about making mistakes\ndon’t let what you can not do interfere with what you can do\ndiscussing code with your neighbours will help\nlook things up in the independent study material\nlook things up in your own code from earlier workshops\nthere are no stupid questions\n\n\n\n\n\n\n\nKey\n\n\n\nThese four symbols are used at the beginning of each instruction so you know where to carry out the instruction.\n Something you need to do on your computer. It may be opening programs or documents or locating a file.\n Something you should do in RStudio. It will often be typing a command or using the menus but might also be creating folders, locating or moving files.\n Something you should do in your browser on the internet. It may be searching for information, going to the VLE or downloading a file.\n A question for you to think about and answer. Record your answers in your script for future reference."
  },
  {
    "objectID": "r4babs1/week-9/workshop.html#adiponectin-secretion",
    "href": "r4babs1/week-9/workshop.html#adiponectin-secretion",
    "title": "Week 9: Summarising data in with several variables and the role of variables in analysis",
    "section": "Adiponectin secretion",
    "text": "Adiponectin secretion\nAdiponectin is exclusively secreted from adipose tissue and modulates a number of metabolic processes. Nicotinic acid can affect adiponectin secretion. 3T3-L1 adipocytes were treated with nicotinic acid or with a control treatment and adiponectin concentration (pg/mL) measured. The data are in adipocytes.txt. Each row represents an independent sample of adipocytes and the first column gives the concentration of adiponectin and the second column indicates whether they were treated with nicotinic acid or not.\n\nImport\n Save adipocytes.txt to your data-raw folder\n Read the data into a dataframe called adipocytes. You might want to look up data import from last week.\n What types of variables do you have in the adipocytes dataframe? What role would you expect them to play in analysis?\n\n\n\n\n\n\nSummarise\nSummarising the data for each treatment group is the next sensible step. The most useful summary statistics for a continuous variable like adiponectin are the means, standard deviations, sample sizes and standard errors. You might remember from last week that we use the group_by() and summarise() functions along with the functions that do the calculations.\n Create a data frame called adip_summary that contains the means, standard deviations, sample sizes and standard errors for the control and nicotinic acid treated samples.\n\nadip_summary &lt;- adipocytes %&gt;%\n  group_by(treatment) %&gt;%\n  summarise(mean = mean(adiponectin),\n            std = sd(adiponectin),\n            n = length(adiponectin),\n            se = std/sqrt(n))\n\nYou should get the following numbers:\n\n\n\n\n\ntreatment\nmean\nstd\nn\nse\n\n\n\n\ncontrol\n5.546000\n1.475247\n15\n0.3809072\n\n\nnicotinic\n7.508667\n1.793898\n15\n0.4631824\n\n\n\n\n\n\n\n\n\nVisualise\nMost commonly, we put the explanatory variable on the x axis and the response variable on the y axis. A continuous response, particularly one that follows the normal distribution, is best summarised with the mean and the standard error. In my opinion, you should also show all the raw data points if possible.\nWe are going to create a figure like this:\n\n\n\n\n\nIn this figure, we have the data points themselves which are in adipocytes dataframe and the means and standard errors which are in the adip_summary dataframe. That is, we have two dataframes we want to plot.\nHere you will learn that dataframes and aesthetics can be specified within a geom_xxxx (rather than in the ggplot()). This is very useful if the geom only applies to some of the data you want to plot.\n\n\n\n\n\n\nTip: ggplot()\n\n\n\nYou put the data argument and aes() inside ggplot() if you want all the geoms to use that dataframe and variables. If you want a different dataframe for a geom, put the data argument and aes() inside the geom_xxxx()\n\n\nI will build the plot up in small steps you should edit your existing ggplot() command as we go.\n Plot the data points first.\n\nggplot() +\n  geom_point(data = adipocytes, \n             aes(x = treatment, y = adiponectin))\n\n\n\n\nNotice how we have given the data argument and the aesthetics inside the geom. The variables treatment and adiponectin are in the adipocytes dataframe\n So the data points don’t overlap, we can add some random jitter in the x direction (edit your existing code):\n\nggplot() +\n  geom_point(data = adipocytes, \n             aes(x = treatment, y = adiponectin),\n             position = position_jitter(width = 0.1, height = 0))\n\n\n\n\nNote that position = position_jitter(width = 0.1, height = 0) is inside the geom_point() parentheses, after the aes() and a comma.\nWe’ve set the vertical jitter to 0 because, in contrast to the categorical x-axis, movement on the y-axis has meaning (the adiponectin levels).\n Let’s make the points a light grey (edit your existing code):\n\nggplot() +\n  geom_point(data = adipocytes, \n             aes(x = treatment, y = adiponectin),\n             position = position_jitter(width = 0.1, height = 0),\n             colour = \"grey50\")\n\n\n\n\nNow to add the errorbars. These go from one standard error below the mean to one standard error above the mean.\n Add a geom_errorbar() for errorbars (edit your existing code):\n\nggplot() +\n  geom_point(data = adipocytes, aes(x = treatment, y = adiponectin),\n             position = position_jitter(width = 0.1, height = 0),\n             colour = \"grey50\") +\n  geom_errorbar(data = adip_summary, \n                aes(x = treatment, ymin = mean - se, ymax = mean + se),\n                width = 0.3) \n\n\n\n\nWe have specified the adip_summary dataframe and the variables treatment, mean and se are in that.\nThere are several ways you could add the mean. You could use geom_point() but I like to use geom_errorbar() again with the ymin and ymax both set to the mean.\n Add a geom_errorbar() for the mean (edit your existing code):\n\nggplot() +\n  geom_point(data = adipocytes, aes(x = treatment, y = adiponectin),\n             position = position_jitter(width = 0.1, height = 0),\n             colour = \"grey50\") +\n  geom_errorbar(data = adip_summary, \n                aes(x = treatment, ymin = mean - se, ymax = mean + se),\n                width = 0.3) +\n  geom_errorbar(data = adip_summary, \n                aes(x = treatment, ymin = mean, ymax = mean),\n                width = 0.2)\n\n\n\n\n Alter the axis labels and limits using scale_y_continuous() and scale_x_discrete() (edit your existing code):\n\nggplot() +\n  geom_point(data = adipocytes, aes(x = treatment, y = adiponectin),\n             position = position_jitter(width = 0.1, height = 0),\n             colour = \"grey50\") +\n  geom_errorbar(data = adip_summary, \n                aes(x = treatment, ymin = mean - se, ymax = mean + se),\n                width = 0.3) +\n  geom_errorbar(data = adip_summary, \n                aes(x = treatment, ymin = mean, ymax = mean),\n                width = 0.2) +\n  scale_y_continuous(name = \"Adiponectin (pg/mL)\", \n                     limits = c(0, 12), \n                     expand = c(0, 0)) +\n  scale_x_discrete(name = \"Treatment\", \n                   labels = c(\"Control\", \"Nicotinic acid\"))\n\n\n\n\nYou only need to use scale_y_continuous() and scale_x_discrete() to use labels that are different from those in the dataset. Often this is to use proper terminology and captialisation.\n Format the figure in a way that is more suitable for including in a report using theme_classic() (edit your existing code):\n\nggplot() +\n  geom_point(data = adipocytes, aes(x = treatment, y = adiponectin),\n             position = position_jitter(width = 0.1, height = 0),\n             colour = \"gray50\") +\n  geom_errorbar(data = adip_summary, \n                aes(x = treatment, ymin = mean - se, ymax = mean + se),\n                width = 0.3) +\n  geom_errorbar(data = adip_summary, \n                aes(x = treatment, ymin = mean, ymax = mean),\n                width = 0.2) +\n  scale_y_continuous(name = \"Adiponectin (pg/mL)\", \n                     limits = c(0, 12), \n                     expand = c(0, 0)) +\n  scale_x_discrete(name = \"Treatment\", \n                   labels = c(\"Control\", \"Nicotinic acid\")) +\n  theme_classic()\n\n\n\n\n\n\nWriting figures to file\n Make a new folder called figures.\n Edit you ggplot code so that you assign the figure to a variable.\n\nadipfig &lt;- ggplot() +\n  geom_point(data = adipocytes, aes(x = treatment, y = adiponectin),\n             position = position_jitter(width = 0.1, height = 0),\n             colour = \"gray50\") +\n  geom_errorbar(data = adip_summary, \n                aes(x = treatment, ymin = mean - se, ymax = mean + se),\n                width = 0.3) +\n  geom_errorbar(data = adip_summary, \n                aes(x = treatment, ymin = mean, ymax = mean),\n                width = 0.2) +\n  scale_y_continuous(name = \"Adiponectin (pg/mL)\", \n                     limits = c(0, 12), \n                     expand = c(0, 0)) +\n  scale_x_discrete(name = \"Treatment\", \n                   labels = c(\"Control\", \"Nicotinic acid\")) +\n  theme_classic()\n\nThe figure won’t be shown in the Plots tab - the output has gone into adipfig rather than to the Plots tab. To make it appear in the Plots tab type adipfig\n The ggsave() command will write a ggplot figure to a file:\n\nggsave(\"figures/adipocytes.png\",\n       plot = adipfig,\n       device = \"png\",\n       width = 3,\n       height = 3,\n       units = \"in\",\n       dpi = 300)\n\nfigures/adipocytes.png is the name of the file including the relative path.  Look up ggsave() in the manual to understand the arguments. You can do this by putting your cursor on the command and pressing F1"
  },
  {
    "objectID": "r4babs1/week-9/workshop.html#myoglobin-in-seal-muscle",
    "href": "r4babs1/week-9/workshop.html#myoglobin-in-seal-muscle",
    "title": "Week 9: Summarising data in with several variables and the role of variables in analysis",
    "section": "Myoglobin in seal muscle",
    "text": "Myoglobin in seal muscle\nThe myoglobin concentration of skeletal muscle of three species of seal in grams per kilogram of muscle was determined and the data are given in seal.csv. Each row represents an individual seal. The first column gives the myoglobin concentration and the second column indicates species.\nThe key point here is that the fundmental structure of the seals data is the same as that for the adipocytes data. The only thing that differs is the number of groups (the number of values in the nominal variable). This means the code for summarising and plotting is identical except for the variable names!\n\n\n\n\n\n\nTip\n\n\n\nWhen two datasets have the same number of columns and the response variable and the explanaotry variables have the same data types then the code you need is the same.\n\n\n\nImport\n Save seal.csv to your data-raw folder\n Read the data into a dataframe called seal. Remember to apply what you learned from last week about importing data.\n What types of variables do you have in the seal dataframe? What role would you expect them to play in analysis?\n\n\n\n\n\n\nSummarise\nWe need the same code as we use for the adipocyte data - but the dataframe and the variable are different.\n Create a data frame called seal_summary that contains the means, standard deviations, sample sizes and standard errors for the control and nicotinic acid treated samples.\nYou should get the following numbers:\n\n\n\n\n\nspecies\nmean\nstd\nn\nse\n\n\n\n\nBladdernose Seal\n42.31600\n8.020634\n30\n1.464361\n\n\nHarbour Seal\n49.01033\n8.252004\n30\n1.506603\n\n\nWeddell Seal\n44.66033\n7.849816\n30\n1.433174\n\n\n\n\n\n\n\n\n\nVisualise\nWe again need the same code as we use for the adipocyte data but with the seal dataframe and its variables.\n Create this figure using your previous code as a template. What else will you need to change?\n\n\n Save the figure to a file in your figures folder\n\nggsave(\"figures/seal-muscle.png\",\n       plot = sealfig,\n       device = \"png\",\n       width = 3,\n       height = 3,\n       units = \"in\",\n       dpi = 300)"
  },
  {
    "objectID": "r4babs1/week-9/workshop.html#pigeons",
    "href": "r4babs1/week-9/workshop.html#pigeons",
    "title": "Week 9: Summarising data in with several variables and the role of variables in analysis",
    "section": "Pigeons",
    "text": "Pigeons\nThe data in pigeon.txt are 40 measurements of interorbital width (in mm) for two populations of domestic pigeons measured to the nearest 0.1mm\n ### Import\n Save pigeon.txt to your data-raw folder\n Read the data into a dataframe called pigeons.\n What variables are there in the pigeons dataframe?\n\n\n\n\nHummmm, these data are not organised like the other data sets we have used. The population is given as the column names and the interorbital distances for one population are given in a different column than those for the other population. The first row has data from two pigeons which have nothing in common, they just happen to be the first individual recorded in each population.\n\n\n\n\n\nA\nB\n\n\n\n\n12.4\n12.6\n\n\n11.2\n11.3\n\n\n11.6\n12.1\n\n\n12.3\n12.2\n\n\n11.8\n11.8\n\n\n10.7\n11.5\n\n\n11.3\n11.2\n\n\n11.6\n11.9\n\n\n12.3\n11.2\n\n\n10.5\n12.1\n\n\n12.1\n11.9\n\n\n10.4\n10.7\n\n\n10.8\n11.0\n\n\n11.9\n12.2\n\n\n10.9\n12.6\n\n\n10.8\n11.6\n\n\n10.4\n10.7\n\n\n12.0\n12.4\n\n\n11.7\n11.8\n\n\n11.3\n11.1\n\n\n11.5\n12.9\n\n\n11.8\n11.9\n\n\n10.3\n11.1\n\n\n10.3\n12.2\n\n\n11.5\n11.8\n\n\n10.7\n11.5\n\n\n11.3\n11.2\n\n\n11.6\n11.9\n\n\n13.3\n11.2\n\n\n10.7\n11.1\n\n\n12.1\n11.6\n\n\n10.2\n12.7\n\n\n10.8\n11.0\n\n\n11.4\n12.2\n\n\n10.9\n11.3\n\n\n10.3\n11.6\n\n\n10.4\n12.2\n\n\n10.0\n12.4\n\n\n11.2\n11.3\n\n\n11.3\n11.1\n\n\n\n\n\n\n\nThis data is not in ‘tidy’ [Wickham2014-nl].\nTidy format has variables in column and observations in rows. All of the distance measurements should be in one column and a second column should give the population.\n\n\n\n\n\npopulation\ndistance\n\n\n\n\nA\n12.4\n\n\nB\n12.6\n\n\nA\n11.2\n\n\nB\n11.3\n\n\nA\n11.6\n\n\nB\n12.1\n\n\nA\n12.3\n\n\nB\n12.2\n\n\nA\n11.8\n\n\nB\n11.8\n\n\nA\n10.7\n\n\nB\n11.5\n\n\nA\n11.3\n\n\nB\n11.2\n\n\nA\n11.6\n\n\nB\n11.9\n\n\nA\n12.3\n\n\nB\n11.2\n\n\nA\n10.5\n\n\nB\n12.1\n\n\nA\n12.1\n\n\nB\n11.9\n\n\nA\n10.4\n\n\nB\n10.7\n\n\nA\n10.8\n\n\nB\n11.0\n\n\nA\n11.9\n\n\nB\n12.2\n\n\nA\n10.9\n\n\nB\n12.6\n\n\nA\n10.8\n\n\nB\n11.6\n\n\nA\n10.4\n\n\nB\n10.7\n\n\nA\n12.0\n\n\nB\n12.4\n\n\nA\n11.7\n\n\nB\n11.8\n\n\nA\n11.3\n\n\nB\n11.1\n\n\nA\n11.5\n\n\nB\n12.9\n\n\nA\n11.8\n\n\nB\n11.9\n\n\nA\n10.3\n\n\nB\n11.1\n\n\nA\n10.3\n\n\nB\n12.2\n\n\nA\n11.5\n\n\nB\n11.8\n\n\nA\n10.7\n\n\nB\n11.5\n\n\nA\n11.3\n\n\nB\n11.2\n\n\nA\n11.6\n\n\nB\n11.9\n\n\nA\n13.3\n\n\nB\n11.2\n\n\nA\n10.7\n\n\nB\n11.1\n\n\nA\n12.1\n\n\nB\n11.6\n\n\nA\n10.2\n\n\nB\n12.7\n\n\nA\n10.8\n\n\nB\n11.0\n\n\nA\n11.4\n\n\nB\n12.2\n\n\nA\n10.9\n\n\nB\n11.3\n\n\nA\n10.3\n\n\nB\n11.6\n\n\nA\n10.4\n\n\nB\n12.2\n\n\nA\n10.0\n\n\nB\n12.4\n\n\nA\n11.2\n\n\nB\n11.3\n\n\nA\n11.3\n\n\nB\n11.1\n\n\n\n\n\n\n\nData which is in tidy format is easier to summarise, analyses and plot because the organisation matches the conceptual structure of the data:\n\nit is more obvious what the variables are because they columns are named with them - in the untidy format, that the measures are distances is not clear and what A and B are isn’t clear\nit is more obvious that there is no relationship between any of the pigeons except for population\nfunctions are designed to work with variables in columns\n\n\nTidying data\nWe can put this data in such a format with the pivot_longer() function from the tidyverse:\npivot_longer() collects the values from specified columns (cols) into a single column (values_to) and creates a column to indicate the group (names_to).\n Put the data in tidy format:\n\npigeons &lt;- pivot_longer(data = pigeons, \n                        cols = everything(), \n                        names_to = \"population\", \n                        values_to = \"distance\")\n\nWe have overwritten the original dataframe. If you wanted to keep the original you would need to give a new name on the left side of the assignment &lt;- Note: the data in the file are unchanged."
  },
  {
    "objectID": "r4babs1/week-9/workshop.html#organising-figures-in-reports",
    "href": "r4babs1/week-9/workshop.html#organising-figures-in-reports",
    "title": "Week 9: Summarising data in with several variables and the role of variables in analysis",
    "section": "Organising figures in reports",
    "text": "Organising figures in reports\nIn this section you will learn a way to lay out figures, legends and text in a document. We will be using a google doc but the methods works just as well in Word. I find the best way to include figures in a document so that things don’t move around unexpectedly as you edit is to use a table with the borders turned off. This is what you are aiming for: R4BABS-1-seal-example. You are not expect to know what to write in the introduction! I’ve written a little text to make the document look more like a report.\n open a Google document\n add some text (it can be any text at all)\n insert a 2 row x 1 column table\n Put your cursor in the bottom cell of the table and a figure legend.\n Put your cursor in the top cell of the table and choose Insert | Image | Upload from computer and navigate to one of your images.\n Hold down the control key and click on each of the borders until all are selected. Then use the Border Width icon to set the width to 0pt\n\n\nYou’re finished!"
  },
  {
    "objectID": "r4babs1/week-9/overview.html",
    "href": "r4babs1/week-9/overview.html",
    "title": "Week 9: Summarising data in with several variables and the role of variables in analysis",
    "section": "",
    "text": "Last week you summarised and plotted single variables. This week you will start plotting data sets with more than one variable. This means you need to be able determine which variable is the response and which is the explanatory. You will find out what is meant by “tidy” data and how to perform a simple data tidying task. Finally you will discover how to save your figures and place them in documents.\n\nLearning objectives\n\nsummarise and plot appropriately datasets with more than one variable\nrecognise that variables can be categorised by their role in analysis\nexplain what is meant by ‘tidy’ data and be able to perform some data tidying tasks.\nsave figures to file\ncreate neat reports which include text and figures\n\n\n\nInstructions\n\nPrepare\n\n📖 Read Working with data in RStudio\n\nWorkshop\n\n💻 Summarise and plot datasets with more than one variable.\n💻 Practice with working directories, importing data, formatting figures and the pipe\n💻 Lay out text, figures and figure legends in documents\n\nConsolidate\n\n💻 Summarise and plot a dataframe from the workshop\n💻 Practice the complete RStudio Project worklfow for a new dataset"
  },
  {
    "objectID": "r4babs1/week-7/study_after_workshop.html",
    "href": "r4babs1/week-7/study_after_workshop.html",
    "title": "Week 7: Introduction to R, RStudio and project organisation",
    "section": "",
    "text": "Set up\nIf you have just opened RStudio you will want to load the tidyverse package\n\nlibrary(tidyverse)\n\n\n\nExercises\n\n💻 In a maternity hospital, the total numbers of births induced on each day of the week over a six week period were recorded (see table below). Create a plot of these data with the days of week in order.\n\n\n\n\nNumber of inductions for each day of the week over six weeks.\n\n\nDay\nNo. inductions\n\n\n\n\nMonday\n43\n\n\nTuesday\n36\n\n\nWednesday\n35\n\n\nThursday\n38\n\n\nFriday\n48\n\n\nSaturday\n26\n\n\nSunday\n24\n\n\n\n\n\n\n\n\n\nCode\n# create a dataframe for the data\nday &lt;- c(\"Monday\", \n         \"Tuesday\", \n         \"Wednesday\",\n         \"Thursday\",\n         \"Friday\",\n         \"Saturday\",\n         \"Sunday\")\nfreq &lt;- c(43, 36, 35, 38, 48, 26, 24) \ninductions &lt;- data.frame(day, freq)\n\n# make the order of the days correct rather than alphabetical\ninductions &lt;- inductions |&gt; \n  mutate(day = fct_relevel(day, c(\"Monday\",\n                                  \"Tuesday\",\n                                  \"Wednesday\",\n                                  \"Thursday\",\n                                  \"Friday\",\n                                  \"Saturday\",\n                                  \"Sunday\")))\n\n# plot the data as a barplot with the bars in\nggplot(data = inductions, \n       aes(x = day, y = freq)) +\n  geom_col(colour = \"black\",\n           fill = \"lightseagreen\") +\n  scale_x_discrete(expand = c(0, 0),\n                   name = \"Day of the week\") + \n  scale_y_continuous(expand = c(0, 0),\n                     name = \"Number of inductions\",\n                     limits = c(0, 55)) +\n  theme_classic()\n\n\n\n📖 Read Workflow in RStudio"
  },
  {
    "objectID": "r4babs1/week-7/study_before_workshop.html",
    "href": "r4babs1/week-7/study_before_workshop.html",
    "title": "Week 7: Introduction to R, RStudio and project organisation",
    "section": "",
    "text": "Prepare\n\nEither 📖 Read First Steps in RStudio in OR 📹 Watch"
  },
  {
    "objectID": "r4babs1/week-7/workshop.html",
    "href": "r4babs1/week-7/workshop.html",
    "title": "Week 7: Introduction to RStudio and your first graphs",
    "section": "",
    "text": "In this introduction you will start working with RStudio. You will typing in some data, perform some calculations on it and plot it.\n\n\n\nWorkshops are not a test. It is expected that you often don’t know how to start, make a lot of mistakes and need help. It is expected that you are familiar with independent study content before the workshop. However, you need not remember or understand every detail as the workshop should build and consolidate your understanding. Tips\n\ndon’t worry about making mistakes\ndon’t let what you can not do interfere with what you can do\ndiscussing code with your neighbours will help\nlook things up in the independent study material\nlook things up in your own code from earlier workshops\nthere are no stupid questions\n\n\n\n\n\n\n\nKey\n\n\n\nThese four symbols are used at the beginning of each instruction so you know where to carry out the instruction.\n Something you need to do on your computer. It may be opening programs or documents or locating a file.\n Something you should do in RStudio. It will often be typing a command or using the menus but might also be creating folders, locating or moving files.\n Something you should do in your browser on the internet. It may be searching for information, going to the VLE or downloading a file.\n A question for you to think about and answer. Record your answers in your script for future reference."
  },
  {
    "objectID": "r4babs1/week-7/workshop.html#session-overview",
    "href": "r4babs1/week-7/workshop.html#session-overview",
    "title": "Week 7: Introduction to RStudio and your first graphs",
    "section": "",
    "text": "In this introduction you will start working with RStudio. You will typing in some data, perform some calculations on it and plot it."
  },
  {
    "objectID": "r4babs1/week-7/workshop.html#philosophy",
    "href": "r4babs1/week-7/workshop.html#philosophy",
    "title": "Week 7: Introduction to RStudio and your first graphs",
    "section": "",
    "text": "Workshops are not a test. It is expected that you often don’t know how to start, make a lot of mistakes and need help. It is expected that you are familiar with independent study content before the workshop. However, you need not remember or understand every detail as the workshop should build and consolidate your understanding. Tips\n\ndon’t worry about making mistakes\ndon’t let what you can not do interfere with what you can do\ndiscussing code with your neighbours will help\nlook things up in the independent study material\nlook things up in your own code from earlier workshops\nthere are no stupid questions\n\n\n\n\n\n\n\nKey\n\n\n\nThese four symbols are used at the beginning of each instruction so you know where to carry out the instruction.\n Something you need to do on your computer. It may be opening programs or documents or locating a file.\n Something you should do in RStudio. It will often be typing a command or using the menus but might also be creating folders, locating or moving files.\n Something you should do in your browser on the internet. It may be searching for information, going to the VLE or downloading a file.\n A question for you to think about and answer. Record your answers in your script for future reference."
  },
  {
    "objectID": "r4babs1/week-7/workshop.html#coat-colour-of-cats",
    "href": "r4babs1/week-7/workshop.html#coat-colour-of-cats",
    "title": "Week 7: Introduction to RStudio and your first graphs",
    "section": "🐈 Coat colour of cats",
    "text": "🐈 Coat colour of cats\n\nThe goal\nWe will work with some data on the coat colour of 62 cats. You are going to type data in R, summarise and plot it\nThe data are as a frequency table:\n\n\n\nFrequency of coat colours in 62 cats\n\n\nCoat colour\nNo. cats\n\n\n\n\nblack\n23\n\n\nwhite\n15\n\n\ntabby\n8\n\n\nginger\n10\n\n\ntortoiseshell\n5\n\n\ncalico\n1\n\n\n\n\n\n\n\nYou will create a figure like this:"
  },
  {
    "objectID": "r4babs1/week-7/workshop.html#creating-the-data",
    "href": "r4babs1/week-7/workshop.html#creating-the-data",
    "title": "Week 7: Introduction to RStudio and your first graphs",
    "section": "Creating the data",
    "text": "Creating the data\nStart by making a vector called coat that holds coat colours\n Write the following in your script:\n\n# coat colours\ncoat &lt;- c(\"black\", \"white\", \"tabby\", \"ginger\", \"tortoiseshell\", \"calico\")\n\nRemember, the shortcut for &lt;- is Alt+- (hold the Alt key down then hit the minus key ).\nNotice I have used a comment. Comment your code as much as possible!\n Ensure your cursor is on the line with the command and do Control+Enter to send the command to the console to be executed.\n Examine the ‘structure’ of the coat object using str()\n\nstr(coat)\n\n chr [1:6] \"black\" \"white\" \"tabby\" \"ginger\" \"tortoiseshell\" \"calico\"\n\n\nIt’s vector of 6 character values, chr\n Create a vector called freq containing the numbers of cats with each coat colour and examine it with str().\n Check sum(freq) gives the answer you expect:\n\n# the total Number of cats\nsum(freq)\n\n[1] 62"
  },
  {
    "objectID": "r4babs1/week-7/workshop.html#packages",
    "href": "r4babs1/week-7/workshop.html#packages",
    "title": "Week 7: Introduction to RStudio and your first graphs",
    "section": "Packages",
    "text": "Packages\nCommands like c(), sum(), and str() are in packages which are part the ‘base’ R system. A package is a collection of related commands. Base packages are installed automatically when you install R.\nOther packages, such as ggplot2 Wickham (2016) need to be installed once and then loaded each session. ggplot2 is one of the tidyverse Wickham et al. (2019) packages.\n\n\n\n\n\n\nImportant\n\n\n\nIf you are working on a University computer (or the VDS) you do not need to install tidyverse.\nIf you are working on your own computer or using RStudio cloud you do need to install tidyverse.\n\n\nTo install a package:\n Go the Packages tab on the lower right pane. Click Install and type tidyverse into the box that appears.\nWait until you get the prompt back. It will take a few moments, be patient!\nTo use a package which is installed you have to load it with the library() function. You will need to do this whether you are working on your own computer or on a University computer\n Load the tidyverse:\n\nlibrary(tidyverse)\n\nYou will likely be warned of some function name conflicts but these will not be a problem for you."
  },
  {
    "objectID": "r4babs1/week-7/workshop.html#plotting-the-data-with-ggplot",
    "href": "r4babs1/week-7/workshop.html#plotting-the-data-with-ggplot",
    "title": "Week 7: Introduction to RStudio and your first graphs",
    "section": "Plotting the data with ggplot()",
    "text": "Plotting the data with ggplot()\nggplot() takes a dataframe for an argument\nWe can make a dataframe of the two vectors, coat and freq usinf the data.frame() function.\n Make a dataframe called coat_data\n\ncoat_data &lt;- data.frame(coat, freq)\n\nn was made into a factor (a categorical variable) because there are only 6 values and I want to make a bar plot.\n Check the structure of coat_data\nClick on coat_data in the Environment to open a spreadsheet-like view of it."
  },
  {
    "objectID": "r4babs1/week-7/workshop.html#a-barplot",
    "href": "r4babs1/week-7/workshop.html#a-barplot",
    "title": "Week 7: Introduction to RStudio and your first graphs",
    "section": "A barplot",
    "text": "A barplot\n Create a simple barplot using ggplot like this:\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col()\n\n\n\n\nggplot() alone creates a blank plot.\nggplot(data = coat_data) looks the same.\naes() gives the ‘Aesthetic mappings’. How variables (columns) are mapped to visual properties (aesthetics) e.g., axes, colour, shapes.\nThus…\nggplot(data = coat_data, aes(x = coat, y = freq)) produces a plot with axes\ngeom_col A ‘Geom’ (Geometric object) gives the visual representations of the data: points, lines, bars, boxplots etc.\nNote that ggplot2 is the name of the package and ggplot() is its most important command."
  },
  {
    "objectID": "r4babs1/week-7/workshop.html#using-the-help-manual",
    "href": "r4babs1/week-7/workshop.html#using-the-help-manual",
    "title": "Week 7: Introduction to RStudio and your first graphs",
    "section": "Using the help manual",
    "text": "Using the help manual\n‘Arguments’ can be added to the geom_col() command inside the brackets.\nCommands do something and their arguments (in brackets) and can specify:\n\nwhat object to do it to\n\nhow exactly to do it\n\nMany arguments have defaults so you don’t always need to supply them.\n Open the manual page for geom_col() using:\n\n?geom_col\n\nThe manual page has several sections.\n\nDescription an overview of what the command does\n\nUsage lists arguments\n\nform: argument name = default value\n\nsome arguments MUST be supplied others have defaults\n... means etc and includes arguments that can be passed to many ‘geoms’\n\nArguments gives the detail about the arguments\nDetails describes how the command works in more detail\n\nValue gives the output of the command\nDon’t be too perturbed by not fully understanding the information"
  },
  {
    "objectID": "r4babs1/week-7/workshop.html#customising-the-plot",
    "href": "r4babs1/week-7/workshop.html#customising-the-plot",
    "title": "Week 7: Introduction to RStudio and your first graphs",
    "section": "Customising the plot",
    "text": "Customising the plot\n\nBar colour\n Change the fill of the bars using fill:\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\")\n\n\n\n\nColours can be given by their name, “lightblue” or code, “#ADD8E6”.\nLook up by name or code\n Change the bars to a colour you like.\nfill is one of the arguments covered by .... fill is an ‘aesthetic’. If you look for ... in the list of arguments you will see it says:\n\nOther arguments passed on to layer(). These are often aesthetics, used to set an aesthetic to a fixed value, like colour = “red” or size = 3. They may also be parameters to the paired geom/stat.\n\nWe just set the `fill` aesthetic to a fixed value.\nFurther down the manual, there is a section on Aesthetics which lists those understood by geom_col()\nWe can set (map) the fill aesthetic to a fixed colour inside geom_col() or map it to a variable from the dataframe inside the aes() instead. This means the colour will be different for different values in that variable.\n Map the fill aesthetic to the coat variable:\n\nggplot(data = coat_data, aes(x = coat, y = freq, fill = coat)) +\n  geom_col()\n\n\n\n\nNote that we have taken fill = \"lightblue\" out of the geom_col() and instead put fill = coat in the aes().\n Use the manual to put the bars next to each other. Look for the argument that will mean there is no space between the bars.\n\n\n\n\n\n Use the manual to change the colour of the lines around each bar to black.\n\n\n\n\n\n\n\nChanging the axes\nWe can make changes to the axes using:\n\nChanges to a discrete x axis: scale_x_discrete()\nChanges to a continuous y axis: scale_y_continuous()\n\nggplot automatically extends the axes slightly. You can turn this behaviour off with the expand argument in scale_x_discrete() and scale_y_continuous().1\n Remove the gap between the axes and the data:\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", \n           width = 1, \n           colour = \"black\") +\n  scale_x_discrete(expand = c(0, 0)) + \n  scale_y_continuous(expand = c(0, 0)) \n\n\n\n\nEach ‘layer’ is added to the ggplot() command with a +\n\n\n\n\n\n\nTop Tip\n\n\n\nMake your code easier to read by using white space and new lines\n\nput spaces around = , -&gt; and after ,\nuse a newline after every comma in a command with lots of arguments\n\n\n\n Look up scale_x_discrete in the manual and work out how to change the axis title from “coat” to “Coat colour”. Also change the y-axis title.\n\n\n\n\n\n I would prefer to see the y-axis extend a little beyond the data and we can change the axis “limits” in the scale_y_continuous()\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", \n           width = 1, \n           colour = \"black\") +\n  scale_x_discrete(expand = c(0, 0),\n                   name = \"Coat colour\") + \n  scale_y_continuous(expand = c(0, 0),\n                     name = \"Number of cats\",\n                     limits = c(0, 25)) \n\n\n\n\n\n\nGetting rid of the grey background\nThe grey grid background is useful for examining plots on a screen but for a report of publication you will want a more scientific style. Every aspect of the “theme” of a plot - the non-data elements such as fonts, background colours, axis line colours etc - can be controlled individually2 but there are some handy built in themes that apply several changes at once. One of these is theme_classic()\n Add theme_classic() to the plot:\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(width = 1, \n           colour = \"black\",\n           fill = \"lightblue\") +\n  scale_x_discrete(expand = c(0, 0),\n                   name = \"Coat colour\") + \n  scale_y_continuous(expand = c(0, 0),\n                     name = \"Number of cats\",\n                     limits = c(0, 25)) +\n  theme_classic()\n\n\n\n\n\n\nChanging the order of bars\nThe default ordering of a categorical variable like coat is alphabetical. Often we want to change the order. For example, you might want a “Control” on the left or the categories might have an inherent order (e.g., small, medium and large). We can alter (mutate) the coat variable using fct_relevel().\n Make “white” the first category:\n\ncoat_data &lt;- coat_data |&gt; \n  mutate(coat = fct_relevel(coat, \"white\"))\n\n\n\n\n\n\n\nThe pipe |&gt;\n\n\n\n|&gt; is called the “pipe”. A keyboard shortcut is Control+Shift+M\nThe pipe puts the output of one command (one the left) as input to another command (on the right). It can be read as “and then”. You will more about it next week.\n\n\n Now plot again.\n\n\n\n\n\nIf you wanted white and then ginger you would do fct_relevel(coat, c(\"white\", \"ginger\")\nWe can also order the categories by the values in another variable by using reorder() in the plot code.\n Reorder the categories in coat by the the value in freq:\n\nggplot(data = coat_data, \n       aes(x = reorder(coat, freq, decreasing = TRUE), \n           y = freq)) +\n  geom_col(width = 1, \n           colour = \"black\",\n           fill = \"lightblue\") +\n  scale_x_discrete(expand = c(0, 0),\n                   name = \"Coat colour\") + \n  scale_y_continuous(expand = c(0, 0),\n                     name = \"Number of cats\",\n                     limits = c(0, 25)) +\n  theme_classic()\n\n\n\n\nYou’re finished!"
  },
  {
    "objectID": "r4babs1/week-7/workshop.html#footnotes",
    "href": "r4babs1/week-7/workshop.html#footnotes",
    "title": "Week 7: Introduction to RStudio and your first graphs",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThere are also scale_x_continous() and scale_y_discrete() functions when you have those types of variable↩︎\nModify components of a theme↩︎"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#outline",
    "href": "r4babs1/week-7/rstudio-projects.html#outline",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "Outline",
    "text": "Outline\n\nWho\nA One-line what\nThe high-level why\n\n\nMight be enough!\n\n\n\nMore detailed why\nMore detailed what"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#audience",
    "href": "r4babs1/week-7/rstudio-projects.html#audience",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "Audience",
    "text": "Audience\n\nYou teach using R directly\n\nBecoming a Bioscientist 1 - 4\nIM group project\nPGT\n\nYou teach or supervise students using R\n\nfield courses, practical work\nprojects\n\nYou use R"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#an-rstudio-project",
    "href": "r4babs1/week-7/rstudio-projects.html#an-rstudio-project",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "📁 An RStudio Project",
    "text": "📁 An RStudio Project\n\nis a folder!\n\n\n\nhave been part of the stage 1 and IM stage 3 for &gt; 5 years\n\n\n\nStage 1\n\nUse an RStudio project containing the script you used to analyse and plot the data for your report, your figures and and the data itself. The Project should be structured and the script should be well-commented, well-organised and follow good practice in the use of spacing, indentation, and variable naming. It should include all the code required to reproduce data import and formatting as well as the summary information, analyses, and figures in your report."
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#y12345678",
    "href": "r4babs1/week-7/rstudio-projects.html#y12345678",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "Y12345678",
    "text": "Y12345678\ndemo"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#babs-1-4-lo-progression",
    "href": "r4babs1/week-7/rstudio-projects.html#babs-1-4-lo-progression",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "BABS 1-4 LO progression",
    "text": "BABS 1-4 LO progression\nBABS 1-5 LO progression"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#why-use-rstudio-projects",
    "href": "r4babs1/week-7/rstudio-projects.html#why-use-rstudio-projects",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "Why use RStudio Projects",
    "text": "Why use RStudio Projects\n\nthe same reason we keep lab books: reproducibility and validation\n\n\nIt’s science!\n\n\n\nvia GIPHY"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#why-use-rstudio-projects-1",
    "href": "r4babs1/week-7/rstudio-projects.html#why-use-rstudio-projects-1",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "Why use RStudio Projects",
    "text": "Why use RStudio Projects\n\nTransferable: explicit training in organising work"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#why-use-rstudio-projects-2",
    "href": "r4babs1/week-7/rstudio-projects.html#why-use-rstudio-projects-2",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "Why use RStudio Projects",
    "text": "Why use RStudio Projects\n\n\n\nhelp you to work with your most important collaborator\n\n\n\n\n\nfutureself, CC-BY-NC, by Julen Colomb"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#section",
    "href": "r4babs1/week-7/rstudio-projects.html#section",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "",
    "text": "via GIPHY"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#working-directories-and-paths",
    "href": "r4babs1/week-7/rstudio-projects.html#working-directories-and-paths",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "Working directories and Paths",
    "text": "Working directories and Paths\n\ndirectory means folder\nimportant concepts when you interact with computers without clicking\n\n\nAllison Horst cartoon “code gets the blame”"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#working-directories",
    "href": "r4babs1/week-7/rstudio-projects.html#working-directories",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "Working directories",
    "text": "Working directories\n\nDefault folder a program will read and write to.\nYou will have some understanding\n\nWord demo"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#paths",
    "href": "r4babs1/week-7/rstudio-projects.html#paths",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "Paths",
    "text": "Paths\n\nlocation of a file/folder\nappear in the address bar of explorer/finder and browsers\n\ndemo\n\n\nwhen you can’t click, you need the path\n\n\nchaffinch &lt;- read_table(\"chaff.txt\")"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#absolute-path",
    "href": "r4babs1/week-7/rstudio-projects.html#absolute-path",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "Absolute path",
    "text": "Absolute path\n\nchaffinch &lt;- read_table(\"C:/Users/er13/OneDrive - University of York/Desktop/Desktop/undergrad-teaching-york/BIO00017C/BIO00017C-Data-Analysis-in-R-2020/data/chaff.txt\")\n\n\nOnly exists on my computer!"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#relative-paths",
    "href": "r4babs1/week-7/rstudio-projects.html#relative-paths",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "Relative paths",
    "text": "Relative paths\n\nlocation of a file/folder relative to the working directory\nIf my working directory is BIO00017C-Data-Analysis-in-R-2020:\n\n\nchaffinch &lt;- read_table(\"data/chaff.txt\")"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#rstudio-projects",
    "href": "r4babs1/week-7/rstudio-projects.html#rstudio-projects",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "RStudio Projects",
    "text": "RStudio Projects\n\nSets the working directory to be the project folder\nCode is portable: you send someone the folder and everything just works!"
  },
  {
    "objectID": "r4babs1/week-7/rstudio-projects.html#demo",
    "href": "r4babs1/week-7/rstudio-projects.html#demo",
    "title": "RStudio ProjectsWho, what, why?",
    "section": "demo",
    "text": "demo"
  },
  {
    "objectID": "r4babs1/week-7/overview.html",
    "href": "r4babs1/week-7/overview.html",
    "title": "Week 7: Introduction to R, RStudio and project organisation",
    "section": "",
    "text": "This week you will start writing R code in RStudio and will create your first graph! You will learn about data types such as “numerics” and “characters” and some of the different types of objects in R such as “vectors” and “dataframes”. These are the building blocks for the rest of your R journey. You will also learn a workflow and about the layout of RStudio and using RStudio Projects.\n\nLearning objectives\n\nuse the R command line as a calculator and to assign variables\ncreate and use the basic data types in R\nfind their way around the RStudio windows\nuse an RStudio Project to organise work\nuse a script to run R commands\ncreate and customise a barplot\nsearch and understand manual pages\n\n\n\nInstructions\n\nPrepare\n\nFirst Steps in RStudio: Either 📖 Read the book OR 📹 Watch two videos\n\nWorkshop\ni.💻 🐈 Coat colour of cats. Type in some data, perform calculations on, and plot it.\nConsolidate\n\n💻 Create a plot\n📖 Read Workflow in RStudio"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analysis in R for Becoming a Bioscientist",
    "section": "",
    "text": "this is the start of a journey BABS 1 to 4 which teach you. progression,\n\n\nReproducible data management, handling, wrangling, modelling and visualisation underpin both the scientific process and many of the most in-demand hard skills. They additionally develop the general computational skill needed for other in-demand hard skills. See, for example LinkedIn’s global list of the most in-demand hard skills.\n\n\n\nPart of the reason that these skills are in-demand is that many view them as difficult and they take time to learn. They are skills you learn, not facts to memorise, and take time and practice in the same way that playing an instrument, speaking another language or playing a sport well take time and practice. You have keep going until you’ve mastered some aspect and tolerate a lot of mistakes. We are all uncomfortable in that process, myself included! I’ve have spent many frustrating hours trying to work out how to express my data question as code both in terms of the logic required and the syntax needed.\n\n\n\nHowever, the process is often fun! There is a lot of problem solving which is enaging work because there’s always something to ‘chase’. I can concentrate on coding for much longer than I can concentrate on writing or reading because it is such an active learning process. There are impressive looking figures, which you can reproduce on a different dataset in moments, exciting biological insights revealed in a test and whole world of ‘techy’ tricks you had no idea you’d be able to do!\n\n\n\nAnd because any coding skill is highly transferable, you can practice on anything at all that you find fun. For examples: Analysing tweets with R Generative Art in R Creating graphs from the R Graph Gallery (all the code is provided)\nThe time and effort you put in to learning “Data Analysis in R” in BABS 1 - 4 WILL reward you no matter how you evaluate yourself relative to others. You will be able to better and/or more quickly: Design your summer term experiment (the antimicrobials practical) and write-up the laboratory report including a reproducible script of analyses and figures contained within it Design and analyse experiments including those for projects in stages 2, 3, and 4 and year-away Evaluate and interpret the data analysis in papers Perform well in assessments Improve your employability!"
  },
  {
    "objectID": "index.html#learning-data-analysis-is-important",
    "href": "index.html#learning-data-analysis-is-important",
    "title": "Data Analysis in R for Becoming a Bioscientist",
    "section": "",
    "text": "Reproducible data management, handling, wrangling, modelling and visualisation underpin both the scientific process and many of the most in-demand hard skills. They additionally develop the general computational skill needed for other in-demand hard skills. See, for example LinkedIn’s global list of the most in-demand hard skills."
  },
  {
    "objectID": "index.html#and-takes-time",
    "href": "index.html#and-takes-time",
    "title": "Data Analysis in R for Becoming a Bioscientist",
    "section": "",
    "text": "Part of the reason that these skills are in-demand is that many view them as difficult and they take time to learn. They are skills you learn, not facts to memorise, and take time and practice in the same way that playing an instrument, speaking another language or playing a sport well take time and practice. You have keep going until you’ve mastered some aspect and tolerate a lot of mistakes. We are all uncomfortable in that process, myself included! I’ve have spent many frustrating hours trying to work out how to express my data question as code both in terms of the logic required and the syntax needed."
  },
  {
    "objectID": "index.html#but-can-be-great-fun",
    "href": "index.html#but-can-be-great-fun",
    "title": "Data Analysis in R for Becoming a Bioscientist",
    "section": "",
    "text": "However, the process is often fun! There is a lot of problem solving which is enaging work because there’s always something to ‘chase’. I can concentrate on coding for much longer than I can concentrate on writing or reading because it is such an active learning process. There are impressive looking figures, which you can reproduce on a different dataset in moments, exciting biological insights revealed in a test and whole world of ‘techy’ tricks you had no idea you’d be able to do!"
  },
  {
    "objectID": "index.html#and-surprising",
    "href": "index.html#and-surprising",
    "title": "Data Analysis in R for Becoming a Bioscientist",
    "section": "",
    "text": "And because any coding skill is highly transferable, you can practice on anything at all that you find fun. For examples: Analysing tweets with R Generative Art in R Creating graphs from the R Graph Gallery (all the code is provided)\nThe time and effort you put in to learning “Data Analysis in R” in BABS 1 - 4 WILL reward you no matter how you evaluate yourself relative to others. You will be able to better and/or more quickly: Design your summer term experiment (the antimicrobials practical) and write-up the laboratory report including a reproducible script of analyses and figures contained within it Design and analyse experiments including those for projects in stages 2, 3, and 4 and year-away Evaluate and interpret the data analysis in papers Perform well in assessments Improve your employability!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\nAbout me"
  },
  {
    "objectID": "r4babs2/r4babs2.html",
    "href": "r4babs2/r4babs2.html",
    "title": "Data Analysis in R for BABS 2",
    "section": "",
    "text": "this is the overview for babs 2 page"
  }
]